#! / bin / bash
# =============================================== ==
#    SCRIPT: BOT SSHPLUS MANAGER
#    DATA ATT: Jan 24, 2021
#    UNWRAPPED BY: CRAZY_VPN
#    SHELLBOT API: SHAMAN
#    TELEGRAM CONTACT: http://t.me/crazy_vpn
#    TELEGRAM CHANNEL: http://t.me/sshplus
# =============================================== ==
[[ !  -d / etc / SSHPlus]] &&  exit 0
[[ !  -d / etc / bot]] &&  exit 0
source ShellBot.sh
api_bot = $ 1
id_admin = $ 2
[[ -z  $ api_bot ]] &&  exit 0
[[ -z  $ id_admin ]] &&  exit 0
[[ !  -e / usr / lib / license]] &&  exit 0
assets = ' / etc / bot / asset_list '
suspensions = ' / etc / bot / suspensions_list '
ShellBot.init --token " $ api_bot " --monitor --return map --flush
ShellBot.username
fun_menu () {
    [[ " $ {message_from_id [$ id]} "  ==  " $ id_admin " ]] && {
        local env_msg
        env_msg = " = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = \ n "
        env_msg + = " <b> SEJA BEM VINDO (a) AO BOT SSHPLUS </b> \ n "
        env_msg + = " = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = \ n \ n "
        env_msg + = " ‚ö†Ô∏è <i> SELECT UMA OPCAO ABAIXO! </i> \ n \ n "
        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} --text " $ env_msg " \
            --reply_markup " $ keyboard1 " \
            --parse_mode html
        return 0
    }
    [[ -d / etc / bot / suspensos / $ {message_from_username} ]] && {
        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
            --text " $ ( echo -e " üö´ VC IS SUSPENDED üö´ \ n \ nCONTATE OR ADMINISTRATOR " ) "
        return 0
    }
    if [[ " $ ( grep -w " $ {message_from_username} "  $ assets  | grep -wc ' resell ' ) "  ! =  ' 0 ' ]] ;  then
        local env_msg
        env_msg = " = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = \ n "
        env_msg + = " <b> SEJA BEM VINDO (a) AO BOT SSHPLUS </b> \ n "
        env_msg + = " = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = \ n \ n "
        env_msg + = " ‚ö†Ô∏è <i> SELECT UMA OPCAO ABAIXO! </i> \ n \ n "
        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} --text " $ env_msg " \
            --reply_markup " $ keyboard2 " \
            --parse_mode html
        return 0
    elif [[ " $ ( grep -w " $ {message_from_username} "  $ assets  | grep -wc ' sublet ' ) "  ! =  ' 0 ' ]] ;  then
        local env_msg
        env_msg = " = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = \ n "
        env_msg + = " <b> SEJA BEM VINDO (a) AO BOT SSHPLUS </b> \ n "
        env_msg + = " = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = \ n \ n "
        env_msg + = " ‚ö†Ô∏è <i> SELECT UMA OPCAO ABAIXO! </i> \ n \ n "
        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} --text " $ env_msg " \
            --reply_markup " $ keyboard3 " \
            --parse_mode html
        return 0
    else
        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
            --text " $ ( echo -e üö´ ACCESS DENIED üö´ ) "
        return 0
    fi
}

fun_ajuda () {
    [[ $ {message_chat_id [$ id]}  ==  " " ]] && {
        id_chatuser = " $ {callback_query_message_chat_id [$ id]} "
        id_name = " $ {callback_query_from_username} "
    } || {
        id_chatuser = " $ {message_chat_id [$ id]} "
        id_name = " $ {message_from_username} "
    }
    if [[ " $ id_chatuser "  =  " $ id_admin " ]] ;  then
        local env_msg
        env_msg = " = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = \ n "
        env_msg + = " <b> BEM VINDO (a) AO BOT SSHPLUS </b> \ n "
        env_msg + = " = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = \ n \ n "
        env_msg + = " ‚ö†Ô∏è <i> Commands Available </i> \ n \ n "
        env_msg + = " [<b> 01 </b>] / menu = Show menu \ n "
        env_msg + = " [<b> 02 </b>] / info = Show informacoes \ n "
        env_msg + = " [<b> 03 </b>] / ajuda = Information about opcoes \ n \ n "
        env_msg + = " ‚ö†Ô∏è <i> Available Options </i> \ n \ n "
        env_msg + = " ‚Ä¢ <u> CREATE USER </u> = Create ssh user \ n \ n "
        env_msg + = " ‚Ä¢ <u> CREATE TEST </u> = Create test ssh \ n \ n "
        env_msg + = " ‚Ä¢ <u> REMOVER </u> = Remove ssh user \ n \ n "
        env_msg + = " ‚Ä¢ <u> USER INFO </u> = User information \ n \ n "
        env_msg + = " ‚Ä¢ <u> ONLINE USERS </u> = Show Online Users \ n \ n "
        env_msg + = " ‚Ä¢ <u> INFO VPS </u> = Server information \ n \ n "
        env_msg + = " ‚Ä¢ <u> ALTER SENHA </u> = Altera senha ssh \ n \ n "
        env_msg + = " ‚Ä¢ <u> ALTER LIMIT </u> = Alter limit ssh \ n \ n "
        env_msg + = " ‚Ä¢ <u> ALTER DATA </u> = Alter data ssh \ n \ n "
        env_msg + = " ‚Ä¢ <u> EXPIRED </u> = Remove expired ssh \ n \ n "
        env_msg + = " ‚Ä¢ <u> BACKUP </u> = Create Backup ssh and resell \ n \ n "
        env_msg + = " ‚Ä¢ <u> OMIT </u> = Clear or cache - ram \ n \ n "
        env_msg + = " ‚Ä¢ <u> SPEEDTESTE </u> = Connection test \ n \ n "
        env_msg + = " ‚Ä¢ <u> FILES </u> = Hosts Archives \ n \ n "
        env_msg + = " ‚Ä¢ <u> RESALES </u> = Manage Resales \ n \ n "
        env_msg + = " ‚Ä¢ <u> AUTOBACKUP </u> = lig / Automatic Des Backup \ n \ n "
        env_msg + = " ‚Ä¢ <u> RECORD </u> = Information about resale \ n \ n "
        env_msg + = " ‚Ä¢ <u> HELP </u> = Information about opcoes \ n \ n "
        ShellBot.sendMessage --chat_id $ id_chatuser \
            --text " $ ( echo -e $ env_msg ) " \
            --parse_mode html
        return 0
    elif [[ -d / etc / bot / suspensions / $ id_name ]] ;  then
        ShellBot.sendMessage --chat_id $ id_chatuser \
            --text " $ ( echo -e " üö´ VC IS SUSPENDED üö´ \ n \ nCONTATE OR ADMINISTRATOR " ) "
        return 0
    elif [[ " $ ( grep -w " $ id_name "  $ assets  | awk ' {print $ NF} ' ) "  ==  ' resell ' ]] ;  then
        local env_msg
        env_msg = " = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = \ n "
        env_msg + = " <b> BEM VINDO (a) AO BOT SSHPLUS </b> \ n "
        env_msg + = " = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = \ n \ n "
        env_msg + = " ‚ö†Ô∏è <i> Commands Available </i> \ n \ n "
        env_msg + = " [<b> 01 </b>] / menu = Show menu \ n "
        env_msg + = " [<b> 02 </b>] / info = Show informacoes \ n "
        env_msg + = " [<b> 03 </b>] / ajuda = Information about opcoes \ n \ n "
        env_msg + = " ‚ö†Ô∏è <i> Available Options </i> \ n \ n "
        env_msg + = " ‚Ä¢ <u> CREATE USER </u> = Create ssh user \ n \ n "
        env_msg + = " ‚Ä¢ <u> CREATE TEST </u> = Create test ssh \ n \ n "
        env_msg + = " ‚Ä¢ <u> REMOVER </u> = Remove ssh user \ n \ n "
        env_msg + = " ‚Ä¢ <u> USER INFO </u> = User information \ n \ n "
        env_msg + = " ‚Ä¢ <u> ONLINE USERS </u> = Show Online Users \ n \ n "
        env_msg + = " ‚Ä¢ <u> ALTER SENHA </u> = Altera senha ssh \ n \ n "
        env_msg + = " ‚Ä¢ <u> ALTER LIMIT </u> = Alter limit ssh \ n \ n "
        env_msg + = " ‚Ä¢ <u> ALTER DATA </u> = Alter data ssh \ n \ n "
        env_msg + = " ‚Ä¢ <u> EXPIRED </u> = Remove expired ssh \ n \ n "
        env_msg + = " ‚Ä¢ <u> RESALES </u> = Manage Resales \ n \ n "
        env_msg + = " ‚Ä¢ <u> RECORD </u> = Information about resale \ n \ n "
        env_msg + = " ‚Ä¢ <u> HELP </u> = Information about opcoes \ n \ n "
        ShellBot.sendMessage --chat_id $ id_chatuser \
            --text " $ ( echo -e $ env_msg ) " \
            --parse_mode html
        return 0
    elif [[ " $ ( grep -w " $ id_name "  $ assets  | awk ' {print $ NF} ' ) "  ==  ' sub-seller ' ]] ;  then
        local env_msg
        env_msg = " = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = \ n "
        env_msg + = " <b> BEM VINDO (a) AO BOT SSHPLUS </b> \ n "
        env_msg + = " = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = \ n \ n "
        env_msg + = " ‚ö†Ô∏è <i> Commands Available </i> \ n \ n "
        env_msg + = " [<b> 01 </b>] / menu = Show menu \ n "
        env_msg + = " [<b> 02 </b>] / info = Show informacoes \ n "
        env_msg + = " [<b> 03 </b>] / ajuda = Information about opcoes \ n \ n "
        env_msg + = " ‚ö†Ô∏è <i> Available Options </i> \ n \ n "
        env_msg + = " ‚Ä¢ <u> CREATE USER </u> = Create ssh user \ n \ n "
        env_msg + = " ‚Ä¢ <u> CREATE TEST </u> = Create test ssh \ n \ n "
        env_msg + = " ‚Ä¢ <u> REMOVER </u> = Remove ssh user \ n \ n "
        env_msg + = " ‚Ä¢ <u> USER INFO </u> = User information \ n \ n "
        env_msg + = " ‚Ä¢ <u> ONLINE USERS </u> = Show Online Users \ n \ n "
        env_msg + = " ‚Ä¢ <u> ALTER SENHA </u> = Altera senha ssh \ n \ n "
        env_msg + = " ‚Ä¢ <u> ALTER LIMIT </u> = Alter limit ssh \ n \ n "
        env_msg + = " ‚Ä¢ <u> ALTER DATA </u> = Alter data ssh \ n \ n "
        env_msg + = " ‚Ä¢ <u> EXPIRED </u> = Remove expired ssh \ n \ n "
        env_msg + = " ‚Ä¢ <u> HELP </u> = Information about opcoes \ n \ n "
        ShellBot.sendMessage --chat_id $ id_chatuser \
            --text " $ ( echo -e $ env_msg ) " \
            --parse_mode html
        return 0
    else
        ShellBot.sendMessage --chat_id $ id_chatuser \
            --text " $ ( echo -e üö´ ACCESS DENIED üö´ ) "
        return 0
    fi
}

verifica_acesso () {
    [[ " $ {message_from_id [$ id]} "  ! =  " $ id_admin " ]] && {
        [[ " $ ( grep -wc $ {message_from_username}  $ hangs ) "  ! =  ' 0 ' ]] || [[ " $ ( grep -wc $ {message_from_username}  $ atives ) "  ==  ' 0 ' ]] && {
            _erro = " 1 "
            return 0
        }
    }
}

fun_adduser () {
    [[ " $ ( grep -wc $ {callback_query_from_username}  $ hangs ) "  ! =  ' 0 ' ]] && {
        ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
            --text " ‚ö†Ô∏è VC IS SUSPENDED! CONTATE OR ADMINISTRATOR "
        return 0
    }
    [[ " $ {callback_query_from_id [$ id]} "  ==  " $ id_admin " ]] || [[ " $ ( grep -wc $ {callback_query_from_username}  $ assets ) "  ! =  ' 0 ' ]] && {
        ShellBot.sendMessage --chat_id $ {callback_query_message_chat_id [$ id]} \
            --text " üë§ CREATE USER üë§ \ n \ nName of user: " \
            --reply_markup " $ ( ShellBot.ForceReply ) "
    } || {
        ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
            --text " üö´ ACCESS DENIED üö´ "
        return 0
    }
}

raise_user () {
    IP = $ ( cat / etc / IP )
    newclient () {
        cp /etc/openvpn/client-common.txt ~ / $ 1 .ovpn
        echo  " <ca> "  >> ~ / $ 1 .ovpn
        cat /etc/openvpn/easy-rsa/pki/ca.crt >> ~ / $ 1 .ovpn
        echo  " </ca> "  >> ~ / $ 1 .ovpn
        echo  " <cert> "  >> ~ / $ 1 .ovpn
        cat / etc / openvpn / easy-rsa / pki / issued / $ 1 .crt >> ~ / $ 1 .ovpn
        echo  " </cert> "  >> ~ / $ 1 .ovpn
        echo  " <key> "  >> ~ / $ 1 .ovpn
        cat / etc / openvpn / easy-rsa / pki / private / $ 1 .key >> ~ / $ 1 .ovpn
        echo  " </key> "  >> ~ / $ 1 .ovpn
        echo  " <tls-auth> "  >> ~ / $ 1 .ovpn
        cat /etc/openvpn/ta.key >> ~ / $ 1 .ovpn
        echo  " </tls-auth> "  >> ~ / $ 1 .ovpn
    }
    file_user = $ 1
    user = $ ( sed -n ' 1 p '  $ file_user  | cut -d '  ' -f2 )
    senha = $ ( sed -n ' 2 p '  $ file_user  | cut -d '  ' -f2 )
    limit = $ ( sed -n ' 3 p '  $ file_user  | cut -d '  ' -f2 )
    data = $ ( sed -n ' 4 p '  $ file_user  | cut -d '  ' -f2 )
    validade = $ ( echo " $ data "  | awk -F ' / '  ' {print $ 2FS $ 1FS $ 3} '  | xargs -i date -d ' {} ' +% Y-% m-% d )
    if / usr / sbin / useradd -M -N -s / bin / false $ user -e $ validade ;  then
        (echo " $ {senha} " ; echo  " $ {senha} " ) | passwd " $ {user} "
    else
        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                --text " $ ( echo -e " ‚ùå ERROR AO CREATE USER ‚ùå " ) " \
                --parse_mode html
        return 0
    fi
    [[ " $ {message_from_id [$ id]} "  ! =  " $ id_admin " ]] && {
        echo  " $ user : $ senha : $ info_data : $ limit "  > / etc / bot / resell / $ {message_from_username} / users / $ user
        echo  " $ user : $ senha : $ info_data : $ limit "  > / etc / bot / info-users / $ user
    }
    echo  " $ user  $ limit "  >> /root/users.db
    echo  " $ senha "  > / etc / SSHPlus / senha / $ user
    [[ -e  " /etc/openvpn/server.conf " ]] && {
        cd / etc / openvpn / easy-rsa /
        ./easyrsa build-client-full $ user nopass
        newclient " $ user "
    }
    echo  " user $ user  $ validade  $ has been raised "
}

fun_deluser () {
    [[ " $ ( grep -wc $ {callback_query_from_username}  $ hangs ) "  ! =  ' 0 ' ]] && {
        ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
            --text " ‚ö†Ô∏è VC IS SUSPENDED! CONTATE OR ADMINISTRATOR "
        return 0
    }
    [[ " $ {callback_query_from_id [$ id]} "  ==  " $ id_admin " ]] || [[ " $ ( grep -wc $ {callback_query_from_username}  $ assets ) "  ! =  ' 0 ' ]] && {
        ShellBot.sendMessage --chat_id $ {callback_query_message_chat_id [$ id]} \
            --text " üóë REMOVE USER üóë \ n \ nName of user: " \
            --reply_markup " $ ( ShellBot.ForceReply ) "
    } || {
        ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
            --text " üö´ ACCESS DENIED üö´ "
        return 0
    }
}

fun_del_user () {
    user = $ 1
    [[ " $ {message_from_id [$ id]} "  =  " $ id_admin " ]] && {
        piduser = $ ( ps -u " $ user "  | grep sshd | cut -d ? -f1 )
        kill -9 $ piduser  > / dev / null 2> & 1
        userdel --force " $ user "  2> / dev / null
        grep -v ^ $ user [[: space:]] /root/usuarios.db > / tmp / ph
        cat / tmp / ph > /root/usuarios.db
        rm / etc / SSHPlus / senha / $ user  > / dev / null 2> & 1
    } || {
        [[ !  -e / etc / bot / resell / $ {message_from_username} / users / $ user ]] && {
            ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                --text " $ ( echo -e " ‚ùå OR USER NAO EXISTS ‚ùå " ) " \
                --parse_mode html
            _erro = ' 1 '
            return 0
        }
        piduser = $ ( ps -u " $ user "  | grep sshd | cut -d ? -f1 )
        kill -9 $ piduser  > / dev / null 2> & 1
        userdel --force " $ user "  2> / dev / null
        grep -v ^ $ user [[: space:]] /root/usuarios.db > / tmp / ph
        cat / tmp / ph > /root/usuarios.db
        rm / etc / SSHPlus / senha / $ user  > / dev / null 2> & 1
        rm / etc / bot / resell / $ {message_from_username} / users / $ user
        rm / etc / bot / info-users / $ user
    }
    [[ -e / etc / SSHPlus / userteste / $ user .sh]] && rm / etc / SSHPlus / userteste / $ user .sh
    [[ -e  " / etc / openvpn / easy-rsa / pki / private / $ user .key " ]] && {
        [[ -e / etc / debian_version]] && GROUPNAME = nogroup
        cd / etc / openvpn / easy-rsa /
        ./easyrsa --batch revoke $ user
        ./easyrsa gen-crl
        rm -rf pki / reqs / $ user .req
        rm -rf pki / private / $ user .key
        rm -rf pki / issued / $ user .crt
        rm -rf /etc/openvpn/crl.pem
        cp /etc/openvpn/easy-rsa/pki/crl.pem /etc/openvpn/crl.pem
        chown nobody: $ GROUPNAME /etc/openvpn/crl.pem
        [[ -e  $ HOME / $ user .ovpn]] && rm $ HOME / $ user .ovpn > / dev / null 2> & 1
    }
}

alter_senha () {
    [[ " $ ( grep -wc $ {callback_query_from_username}  $ hangs ) "  ! =  ' 0 ' ]] && {
        ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
            --text " ‚ö†Ô∏è VC IS SUSPENDED! CONTATE OR ADMINISTRATOR "
        return 0
    }
    [[ " $ {callback_query_from_id [$ id]} "  ==  " $ id_admin " ]] || [[ " $ ( grep -wc $ {callback_query_from_username}  $ assets ) "  ! =  ' 0 ' ]] && {
        ShellBot.sendMessage --chat_id $ {callback_query_message_chat_id [$ id]} \
            --text " üîê Alter Senha üîê \ n \ nUsername: " \
            --reply_markup " $ ( ShellBot.ForceReply ) "
    } || {
        ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
            --text " üö´ ACCESS DENIED üö´ "
        return 0
    }
}

alter_senha_user () {
    user = $ 1
    senha = $ 2
    echo  " $ user : $ senha "  | chpasswd
    echo  " $ senha "  > / etc / SSHPlus / senha / $ user
    [[ -e / etc / bot / resell / $ {message_from_username} / users / $ user ]] && {
        senha2 = $ ( cat / etc / bot / resell / $ {message_from_username} / users / $ user  | awk -F : { ' print $ 2 ' } )
        sed -i " / $ user / s / \ b $ senha2 \ b / $ senha / g " / etc / bot / resell / $ {message_from_username} / users / $ user
        sed -i " / $ user / s / \ b $ senha2 \ b / $ senha / g " / etc / bot / info-users / $ user
    }
    [[ $ ( ps -u $ user  | grep sshd | wc -l )  ! =  ' 0 ' ]] && pkill -u $ user  > / dev / null 2> & 1
}

alter_limite () {
    [[ " $ ( grep -wc $ {callback_query_from_username}  $ hangs ) "  ! =  ' 0 ' ]] && {
        ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
            --text " ‚ö†Ô∏è VC IS SUSPENDED! CONTATE OR ADMINISTRATOR "
        return 0
    }
    [[ " $ {callback_query_from_id [$ id]} "  ==  " $ id_admin " ]] || [[ " $ ( grep -wc $ {callback_query_from_username}  $ assets ) "  ! =  ' 0 ' ]] && {
        ShellBot.sendMessage --chat_id $ {callback_query_message_chat_id [$ id]} \
            --text " üë• Alter Limit üë• \ n \ nUsername: " \
            --reply_markup " $ ( ShellBot.ForceReply ) "
    } || {
        ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
            --text " üö´ ACCESS DENIED üö´ "
        return 0
    }
}

alter_limite_user () {
    user = $ 1
    limit = $ 2
    database = " /root/usuarios.db "
    [[ " $ {message_from_id [$ id]} "  ==  " $ id_admin " ]] && {
        grep -v ^ $ user [[: space:]] /root/usuarios.db > / tmp / a
        mv / tmp / a /root/usuarios.db
        echo  $ user  $ limit  >> /root/users.db
        return 0
    }
    [[ -d / etc / bot / resell / $ {message_from_username} ]] && {
        [[ !  -e / etc / bot / resell / $ {message_from_username} / users / $ user ]] && {
            ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                --text " $ ( echo -e " ‚ùå OR USER NAO EXISTS ‚ùå " ) " \
                --parse_mode html
            _erro = ' 1 '
            return 0
        }
        _limTotal = $ ( grep -w ' LIMITE_REVENDA ' / etc / bot / resell / $ {message_from_username} / $ {message_from_username}  | awk ' {print $ NF} ' )
        [[ " $ limit "  -gt  " $ _limTotal " ]] && {
            ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                --text " $ ( echo -e " ‚ùå VC NAO TEM LIMITS SUFFICIENT ‚ùå \ n \ nLimit Atual: $ _limTotal  " ) " \
                --parse_mode html
            _erro = ' 1 '
            return 0
        }
        _limTotal = $ ( grep -w " $ {message_from_username} "  $ ativos  | awk ' {print $ 4} ' )
        fun_verif_limite_rev $ {message_from_username}
        _limsomarev2 = $ ( echo " $ _result + $ limit "  | bc )
        echo  " Total $ _limsomarev2 "
        [[ " $ _limsomarev2 "  -gt  " $ _limTotal " ]] && {
            [[ " $ _limTotal "  ==  " $ (( $ _limTotal  -  $ _result )) " ]] && _restant1 = ' 0 '  || _restant1 = $ (( $ _limTotal  -  $ _result ))
            ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                --text " $ ( echo -e " ‚ùå Vc nao tem limit enough \ n \ nLimit remaining: $ _restant1  " ) " \
                --parse_mode html
            _erro = ' 1 '
            return 0
        }
        grep -v ^ $ user [[: space:]] /root/usuarios.db > / tmp / a
        mv / tmp / a /root/usuarios.db
        echo  $ user  $ limit  >> /root/users.db
        limit2 = $ ( cat / etc / bot / resell / $ {message_from_username} / users / $ user  | awk -F : { ' print $ 4 ' } )
        sed -i " / \ b $ user \ b / s / \ b $ limit2 \ b / $ limit / " / etc / bot / resell / $ {message_from_username} / users / $ user
        sed -i " / \ b $ user \ b / s / \ b $ limit2 \ b / $ limit / " / etc / bot / info-users / $ user
    }
}

alter_data () {
    [[ " $ ( grep -wc $ {callback_query_from_username}  $ hangs ) "  ! =  ' 0 ' ]] && {
        ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
            --text " ‚ö†Ô∏è VC IS SUSPENDED! CONTATE OR ADMINISTRATOR "
        return 0
    }
    [[ " $ {callback_query_from_id [$ id]} "  ==  " $ id_admin " ]] || [[ " $ ( grep -wc $ {callback_query_from_username}  $ assets ) "  ! =  ' 0 ' ]] && {
        ShellBot.sendMessage --chat_id $ {callback_query_message_chat_id [$ id]} \
            --text " ‚è≥ Alter Data ‚è≥ \ n \ nUsername: " \
            --reply_markup " $ ( ShellBot.ForceReply ) "
    } || {
        ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
            --text " üö´ ACCESS DENIED üö´ "
        return 0
    }
}

alter_data_user () {
    user = $ 1
    inputdate = $ 2
    database = " /root/usuarios.db "
    [[ " $ ( echo -e " $ inputdate "  | sed -e ' s / [^ /] // ig ' ) "  ! =  ' // ' ]] && {
        udata = $ ( date " +% d /% m /% Y " -d " + $ inputdate days " )
        sysdate = " $ ( echo " $ udata "  | awk -v FS = / -v OFS = - ' {print $ 3, $ 2, $ 1} ' ) "
    } || {
        udata = $ ( echo -e " $ inputdate " )
        sysdate = " $ ( echo -e " $ inputdate "  | awk -v FS = / -v OFS = - ' {print $ 3, $ 2, $ 1} ' ) "
        today = " $ ( date -d today + " % Y% m% d " ) "
        timemachine = " $ ( date -d " $ sysdate " + " % Y% m% d " ) "
        [ $ today  -ge  $ timemachine ] && {
            verify = ' 1 '
            ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                --text " $ ( echo -e " ‚ùå Erro! Data invalid " ) " \
                --parse_mode html
            _erro = ' 1 '
            return 0
        }
    }
    chage -E $ sysdate  $ user
    [[ -e / etc / bot / resell / $ {message_from_username} / users / $ user ]] && {
        data2 = $ ( cat / etc / bot / info-users / $ user  | awk -F : { ' print $ 3 ' } )
        sed -i " s; $ data2 ; $ udata ; " / etc / bot / info-users / $ user
        echo  $ user  $ udata  $ {message_from_username}
        sed -i " s; $ data2 ; $ udata ; " / etc / bot / resell / $ {message_from_username} / users / $ user
    }
}

ver_users () {
    if [[ " $ {callback_query_from_id [$ id]} "  ==  " $ id_admin " ]] ;  then
        arq_info = / tmp / $ ( echo $ RANDOM )
        local info_users
        info_users = ' = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = \ n '
        info_users + = ' <b> INFORMACOES TWO USERS </b> \ n '
        info_users + = ' = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = \ n \ n '
        info_users + = ' ‚ö†Ô∏è Show below format: \ n \ n '
        info_users + = ' <code> USER SENHA LIMITE DATA </code> \ n '
        ShellBot.sendMessage --chat_id $ id_admin \
            --text " $ ( echo -e $ info_users ) " \
            --parse_mode html
        fun_infu () {
            local info
            for  user  in  $ ( cat / etc / passwd | awk -F :  ' $ 3> = 1000 {print $ 1} '  | grep -v nobody ) ;  do
                info = ' =========================== \ n '
                [[ -e / etc / SSHPlus / senha / $ user ]] && senha = $ ( cat / etc / SSHPlus / senha / $ user )  || senha = ' Null '
                [[ $ ( grep -wc $ user  $ HOME /users.db )  ! =  ' 0 ' ]] && limit = $ ( grep -w $ user  $ HOME /users.db | cut -d '  ' -f2 )  || limit = ' Null '
                datauser = $ ( chage -l $ user  | grep -i co | awk -F :  ' {print $ 2} ' )
                [[ $ datauser  =  ' never ' ]] && {
                    data = " 00/00/00 "
                } || {
                    databr = " $ ( date -d " $ datauser " + " % Y% m% d " ) "
                    leaf = " $ ( date -d today + " % Y% m% d " ) "
                    [[ $  hoje -ge  $ databr ]] && {
                        data = " Due "
                    } || {
                        dat = " $ ( date -d " $ datauser "  ' +% Y-% m-% d ' ) "
                        data = $ ( echo -e " $ (( ($ (date - ud $ dat  +% s) - $ (date - ud $ (date +% Y -% m -% d) +% s )) / 86400) ) DAYS " )
                    }
                }
                info + = " $ user ‚Ä¢ $ senha ‚Ä¢ $ limit ‚Ä¢ $ data "
                echo -e " $ info "
            done
        }
        fun_infu > $ arq_info
        while  : ;  do
            ShellBot.sendMessage --chat_id $ id_admin \
                --text " $ ( while read Linha ,  do  I miss  $ Linha ,  done  <  <( sed ' 1.30 d! '  $ arq_info ) ) " \
                --parse_mode html
            sed -i 1.30d $ arq_info
            [[ $ ( cat $ arq_info  | wc -l )  =  ' 0 ' ]] && rm $ arq_info  &&  break
        done
    elif [[ " $ ( grep -wc " $ {callback_query_from_username} "  $ ativos ) "  ! =  ' 0 ' ]] ;  then
        [[ " $ ( grep -wc $ {callback_query_from_username}  $ hangs ) "  ! =  ' 0 ' ]] && {
            ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
                --text " ‚ö†Ô∏è VC IS SUSPENDED! CONTATE OR ADMINISTRATOR "
            return 0
        }
        [[ $ ( ls / etc / bot / resell / $ {callback_query_from_username} / users | wc -l )  ==  ' 0 ' ]] && {
            ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
                --text " VC AINDA NAO CRIOU USER! "
            return 0
        }
        arq_info = / tmp / $ ( echo $ RANDOM )
        local info_users
        info_users = ' = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = \ n '
        info_users + = ' <b> INFORMACOES TWO USERS </b> \ n '
        info_users + = ' = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = \ n \ n '
        info_users + = ' ‚ö†Ô∏è Show below format: \ n \ n '
        info_users + = ' <code> USER SENHA LIMITE DATA </code> \ n '
        ShellBot.sendMessage --chat_id $ {callback_query_message_chat_id [$ id]} \
            --text " $ ( echo -e $ info_users ) " \
            --parse_mode html
        fun_infu () {
            local info
            for  user  in  $ ( ls / etc / bot / resell / $ {callback_query_from_username} / users ) ;  do
                info = ' =========================== \ n '
                [[ -e / etc / SSHPlus / senha / $ user ]] && senha = $ ( cat / etc / SSHPlus / senha / $ user )  || senha = ' Null '
                [[ $ ( grep -wc $ user  $ HOME /users.db )  ! =  ' 0 ' ]] && limit = $ ( grep -w $ user  $ HOME /users.db | cut -d '  ' -f2 )  || limit = ' Null '
                datauser = $ ( chage -l $ user  | grep -i co | awk -F :  ' {print $ 2} ' )
                [[ $ datauser  =  ' never ' ]] && {
                    data = " 00/00/00 "
                } || {
                    databr = " $ ( date -d " $ datauser " + " % Y% m% d " ) "
                    leaf = " $ ( date -d today + " % Y% m% d " ) "
                    [[ $  hoje -ge  $ databr ]] && {
                        data = " Due "
                    } || {
                        dat = " $ ( date -d " $ datauser "  ' +% Y-% m-% d ' ) "
                        data = $ ( echo -e " $ (( ($ (date - ud $ dat  +% s) - $ (date - ud $ (date +% Y -% m -% d) +% s )) / 86400) ) DAYS " )
                    }
                }
                info + = " $ user ‚Ä¢ $ senha ‚Ä¢ $ limit ‚Ä¢ $ data "
                echo -e " $ info "
            done
        }
        fun_infu > $ arq_info
        while  : ;  do
            ShellBot.sendMessage --chat_id $ {callback_query_message_chat_id [$ id]} \
                --text " $ ( while read Linha ,  do  I miss  $ Linha ,  done  <  <( sed ' 1.30 d! '  $ arq_info ) ) " \
                --parse_mode html
            sed -i 1.30d $ arq_info
            [[ $ ( cat $ arq_info  | wc -l )  =  ' 0 ' ]] && rm $ arq_info  &&  break
        done
    else
        ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
            --text " $ ( echo -e üö´ ACCESS DENIED üö´ ) "
        return 0
    fi
}

fun_drop () {
    port_dropbear = $ ( ps aux | grep dropbear | awk NR == 1 | awk ' {print $ 17;} ' )
    log = / var / log / auth.log
    loginsukses = ' Password auth succeeded '
    pids = $ ( ps ax | grep dropbear | grep "  $ port_dropbear "  | awk -F "  "  ' {print $ 1} ' )
    for  pid  in  $ pids ;  do
        pidlogs = $ ( grep $ pid  $ log  | grep " $ loginsukses "  | awk -F "  "  ' {print $ 3} ' )
        i = 0
        for  pidlogs  in  $ pidlogs ;  do
            let i = i + 1
        done
        if [ $ pidnd ] ;  then
            login = $ ( grep $ pid  $ log  | grep " $ pidnd "  | grep " $ loginsukses " )
            PID = $ pid
            user = $ ( echo $ login  | awk -F "  "  ' {print $ 10} '  | sed -r " s / '/ / g " )
            waktu = $ ( echo $ login  | awk -F "  "  ' {print $ 2 "-" $ 1, $ 3} ' )
            while [ $ { # waktu}  -lt 13] ;  do
                waktu = $ waktu "  "
            done
            while [ $ { # user}  -lt 16] ;  do
                user = $ user "  "
            done
            while [ $ { # PID}  -lt 8] ;  do
                PID = $ PID "  "
            done
            echo  " $ user  $ PID  $ waktu "
        fi
    done
}

monitor_ssh () {
    if [[ " $ {callback_query_from_id [$ id]} "  ==  " $ id_admin " ]] ;  then
        database = " /root/usuarios.db "
        cad_onli = / tmp / $ ( echo $ RANDOM )
        local info_on
        info_on = ' = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = \ n '
        info_on + = ' <b> MONITOR FOR ONLINE USERS </b> \ n '
        info_on + = ' = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = \ n \ n '
        info_on + = ' ‚ö†Ô∏è Show not below format: \ n \ n '
        info_on + = ' <code> ONLINE USER / LIMITE TEMPO \ n </code> '
        ShellBot.sendMessage --chat_id $ {callback_query_message_chat_id [$ id]} \
            --text " $ ( echo -e $ info_on ) " \
            --parse_mode html
        fun_online () {
            local info2
            for  user  in  $ ( cat / etc / passwd | awk -F :  ' $ 3> = 1000 {print $ 1} '  | grep -v nobody ) ;  do
                [[ " $ ( grep -w $ user  $ database ) "  ! =  " 0 " ]] && lim = " $ ( grep -w $ user  $ database  | cut -d '  ' -f2 ) "  || lim = 0
                [[ $ ( netstat -nltp | grep ' dropbear '  | wc -l )  ! =  ' 0 ' ]] && drop = " $ ( fun_drop | grep " $ user "  | wc -l ) "  || drop = 0
                [[ -e /etc/openvpn/openvpn-status.log]] && ovp = " $ ( cat /etc/openvpn/openvpn-status.log | grep -E, " $ user " , | wc -l ) "  | | ovp = 0
                sqd = " $ ( ps -u $ user  | grep sshd | wc -l ) "
                _cont = $ (( $ drop  +  $ ovp ))
                conne = $ (( $ _cont  +  $ sqd ))
                [[ $  Conex -gt  ' 0 ' ]] && {
                    timerr = " $ ( ps -o etime $ ( ps -u $ user  | grep sshd | awk ' NR == 1 {print $ 1} ' )  | awk ' NR == 2 {print $ 1} ' ) "
                    info2 + = " =========================== \ n "
                    info2 + = " üü¢ $ user        $ conne / $ lim        ‚è≥ $ timerr \ n "
                }
            done
            echo -e " $ info2 "
        }
        fun_online > $ cad_onli
        [[ $ ( cat $ cad_onli  | wc -w )  ! =  ' 0 ' ]] && {
            while  : ;  do
                ShellBot.sendMessage --chat_id $ {callback_query_message_chat_id [$ id]} \
                    --text " $ ( while read Linha ,  do  I miss  $ Linha ,  done  <  <( sed ' 1.30 d! '  $ cad_onli ) ) " \
                    --parse_mode html
                sed -i 1.30d $ cad_onli
                [[ " $ ( cat $ cad_onli  | wc -l ) "  =  ' 0 ' ]] && {
                    rm $ cad_onli
                    break
                }
            done
        } || {
            ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
                --text " Nenhum user online " \
                --parse_mode html
            return 0
        }
    elif [[ " $ ( grep -wc " $ {callback_query_from_username} "  $ ativos ) "  ! =  ' 0 ' ]] ;  then
        [[ " $ ( grep -wc $ {callback_query_from_username}  $ hangs ) "  ! =  ' 0 ' ]] && {
            ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
                --text " ‚ö†Ô∏è VC IS SUSPENDED! CONTATE OR ADMINISTRATOR "
            return 0
        }
        [[ $ ( ls / etc / bot / resell / $ {callback_query_from_username} / users | wc -l )  ==  ' 0 ' ]] && {
            ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
                --text " VC AINDA NAO CRIOU USER! "
            return 0
        }
        database = " /root/usuarios.db "
        cad_onli = / tmp / $ ( echo $ RANDOM )
        local info_on
        info_on = ' = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = \ n '
        info_on + = ' <b> MONITOR FOR ONLINE USERS </b> \ n '
        info_on + = ' = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = \ n \ n '
        info_on + = ' ‚ö†Ô∏è Show not below format: \ n \ n '
        info_on + = ' <code> ONLINE USER / LIMITE TEMPO \ n </code> '
        ShellBot.sendMessage --chat_id $ {callback_query_message_chat_id [$ id]} \
            --text " $ ( echo -e $ info_on ) " \
            --parse_mode html
        fun_online () {
            local info2
            for  user  in  $ ( ls / etc / bot / resell / $ {callback_query_from_username} / users ) ;  do
                [[ " $ ( grep -w $ user  $ database ) "  ! =  " 0 " ]] && lim = " $ ( grep -w $ user  $ database  | cut -d '  ' -f2 ) "  || lim = 0
                [[ $ ( netstat -nltp | grep ' dropbear '  | wc -l )  ! =  ' 0 ' ]] && drop = " $ ( fun_drop | grep " $ user "  | wc -l ) "  || drop = 0
                [[ -e /etc/openvpn/openvpn-status.log]] && ovp = " $ ( cat /etc/openvpn/openvpn-status.log | grep -E, " $ user " , | wc -l ) "  | | ovp = 0
                sqd = " $ ( ps -u $ user  | grep sshd | wc -l ) "
                conne = $ (( $ sqd  +  $ ovp  +  $ drop ))
                [[ $  Conex -gt  ' 0 ' ]] && {
                    timerr = " $ ( ps -o etime $ ( ps -u $ user  | grep sshd | awk ' NR == 1 {print $ 1} ' )  | awk ' NR == 2 {print $ 1} ' ) "
                    info2 + = " ------------------------------ \ n "
                    info2 + = " üë§ $ user        $ conne / $ lim        ‚è≥ $ timerr \ n "
                }
            done
            echo -e " $ info2 "
        }
        fun_online > $ cad_onli
        [[ $ ( cat $ cad_onli  | wc -w )  ! =  ' 0 ' ]] && {
            while  : ;  do
                ShellBot.sendMessage --chat_id $ {callback_query_message_chat_id [$ id]} \
                    --text " <code> $ ( while read Linha ,  do  I miss  $ Linha ,  done  <  <( sed ' ! 1.30 d '  $ cad_onli ) ) </ code> " \
                    --parse_mode html
                sed -i 1.30d $ cad_onli
                [[ " $ ( cat $ cad_onli  | wc -l ) "  =  ' 0 ' ]] && {
                    rm $ cad_onli
                    break
                }
            done
        } || {
            ShellBot.sendMessage --chat_id $ {callback_query_message_chat_id [$ id]} \
                --text " Nenhum user online " \
                --parse_mode html
            return 0
        }
    else
        ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
            --text " $ ( echo -e üö´ ACCESS DENIED üö´ ) "
        return 0
    fi
}

fun_verif_user () {
    user = $ 1
    [[ -z  " $ user " ]] && {
        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
            --text " $ ( echo -e " Erro " ) " \
            --parse_mode html
        return 0
    }
    [[ " $ {message_from_id [$ id]} "  ==  " $ id_admin " ]] && {
        [[ " $ ( awk -F :  ' $ 3> = 1000 {print $ 1} ' / etc / passwd | grep -wc $ user ) "  ==  ' 0 ' ]] && {
            ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                --text " $ ( echo -e ‚ùå User $ user does not exist ! ) " \
                --parse_mode html
            _erro = ' 1 '
            return 0
        }
    }
    [[ -d / etc / bot / resell / $ {message_from_username} ]] && {
        [[ !  -e / etc / bot / resell / $ {message_from_username} / users / $ user ]] && {
            ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                --text " $ ( echo -e ‚ùå User $ user nao exists ! ) " \
                --parse_mode html
            _erro = ' 1 '
            return 0
        }
    }
}

fun_down () {
    [[ " $ {callback_query_from_id [$ id]} "  ! =  " $ id_admin " ]] && {
        ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
            --text " üö´ ACCESS DENIED üö´ "
        return 0
    }
    [[ !  -d / tmp / file]] && mkdir / tmp / file
    ShellBot.sendMessage --chat_id $ {callback_query_message_chat_id [$ id]} \
        --text " [1] - ADD FILE \ n [2] - EXCLUDE FILE \ n \ nReport opcao [1-2]: " \
        --reply_markup " $ ( ShellBot.ForceReply ) "
}

infovps () {
    [[ " $ {callback_query_from_id [$ id]} "  ! =  " $ id_admin " ]] && {
        ShellBot.sendMessage --chat_id $ {callback_query_message_chat_id [$ id]} \
            --text " $ ( echo -e üö´ ACCESS DENIED üö´ ) "
        return 0
    }
    PTs = ' / tmp / prts '
    _ons = $ ( ps -x | grep sshd | grep -v root | grep priv | wc -l )
    [[ -e /etc/openvpn/openvpn-status.log]] && _onop = $ ( grep -c " 10.8.0 " /etc/openvpn/openvpn-status.log )  || _onop = " 0 "
    [[ -e / etc / default / dropbear]] && _drp = $ ( ps aux | grep dropbear | grep -v grep | wc -l ) _ondrp = $ (( $ _drp  -  1 ))  || _ondrp = " 0 "
    _on = $ (( $ _ons  +  $ _onop  +  $ _ondrp ))
    total = $ ( awk -F: ' $ 3> = 1000 {print $ 1} ' / etc / passwd | grep -v nobody | wc -l )
    system = $ ( cat /etc/issue.net )
    usage = $ ( top -bn1 | awk ' / Cpu / {cpu = "" 100 - $ 8 "%"}; END {print cpu} ' )
    cpucores = $ ( grep -c cpu [0-9] / proc / stat )
    ram1 = $ ( free -h | grep -i mem | awk { ' print $ 2 ' } )
    useram = $ ( free -m | awk ' NR == 2 {printf "% .2f %% \ t \ t", $ 3 * 100 / $ 2} ' )
    total = $ ( cat -n /root/users.db | tail -n 1 | awk ' {print $ 1} ' )
    echo -e " SSH: $ ( grep ' Port ' / etc / ssh / sshd_config | cut -d '  ' -f2 | grep -v ' no '  | xargs ) "  > $ PTs
    [[ -e  " /etc/stunnel/stunnel.conf " ]] &&  echo -e " SSL Tunel: $ ( netstat -nplt | grep ' stunnel '  | awk { ' print $ 4 ' } | cut -d: -f2 | xargs ) "  >> $ PTs
    [[ -e  " /etc/openvpn/server.conf " ]] &&  echo -e " Openvpn: $ ( netstat -nplt | grep ' openvpn '  | awk { ' print $ 4 ' } | cut -d: -f2 | xargs ) "  >> $ PTs
    [[ " $ ( netstat -nplt | grep ' sslh '  | wc -l ) "  ! =  ' 0 ' ]] &&  echo -e " SSlh: $ ( netstat -nplt | grep ' sslh '  | awk { ' print $ 4 ' } | cut -d: -f2 | xargs ) "  >> $ PTs
    [[ " $ ( netstat -nplt | grep ' squid '  | wc -l ) "  ! =  ' 0 ' ]] &&  echo -e " Squid: $ ( netstat -nplt | grep ' squid '  | awk -F " : " { ' print $ 4 ' } | xargs ) "  >> $ PTs
    [[ " $ ( netstat -nltp | grep ' dropbear '  | wc -l ) "  ! =  ' 0 ' ]] &&  echo -e " DropBear: $ ( netstat -nplt | grep ' dropbear '  | awk -F " : " { ' print $ 4 ' } | xargs ) "  >> $ PTs
    [[ " $ ( netstat -nplt | grep ' python '  | wc -l ) "  ! =  ' 0 ' ]] &&  echo -e " Proxy Socks: $ ( netstat -nplt | grep ' python '  | awk { ' print $ 4 ' } | cut -d: -f2 | xargs ) "  >> $ PTs
    local info
    info = " = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = \ n "
    info + = " <b> INFORMACOES DO SERVEROR </b> \ n "
    info + = " = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = \ n \ n "
    info + = " <b> OPERATIONAL SYSTEM </b> \ n "
    info + = " $ system \ n \ n "
    info + = " <b> PROCESSOR </b> \ n "
    info + = " <b> Nuclei: </b> $ cpucores \ n "
    info + = " <b> Ultilizacao: </b> $ use \ n \ n "
    info + = " <b> RAM MEMORY </b> \ n "
    info + = " <b> Total: </b> $ ram1 \ n "
    info + = " <b> Ultilizacao: </b> $ usoram \ n \ n "
    while  read linha ;  do
        info + = " <b> $ ( echo -e " $ linha " ) </b> \ n "
    done  <<  ( cat $ PTs )
    info + = " \ n <b> $ total </b> <i> USERS </i> <b> $ _on </b> <i> ONLINE </i> "
    ShellBot.sendMessage --chat_id $ id_admin \
        --text " $ ( echo -e $ info ) " \
        --parse_mode html
    return 0
}

fun_download () {
    Opt = $ 1
    [[ -z  " $ Opt " ]] && {
        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
            --text " $ ( echo -e " ‚ùåErro tente novamente " ) "
        _erro = ' 1 '
        return 0
    }
    _file2 = $ 2
    [[ -z  " $ _file2 " ]] && {
        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
            --text " $ ( echo -e " ‚ùåErro tente novamente " ) "
        _erro = ' 1 '
        return 0
    }
    _DirArq = $ ( ls / etc / bot / files )
    i = 0
    unset _Pass
    while  read _Arq ;  do
        i = $ ( expr $ i + 1 )
        _oP = $ i
        [[ $ i  == [1-9]]] && i = 0 $ i  && oP + = " 0 $ i "
        echo -e " [ $ i ] - $ _Arq "
        _Pass + = " \ n $ {_ oP} : $ {_ Arq} "
    done  <<< " $ {_ DirArq} "
    _file = $ ( echo -e " $ {_ Pass} "  | grep -E " \ b $ Opc \ b "  | cut -d: -f2 )
    echo  $ _file2
    ShellBot.sendDocument --chat_id $ {message_from_id [$ id]} \
        --document " @ / etc / bot / files / $ _file " \
        --caption " $ ( echo -e " ‚úÖ SERVED COM SUCCESS ‚úÖ \ n \ nUSER: <code> $ ( awk -F "  "  ' / Nome / {print $ 2} '  $ _file2 ) </code> \ nSENHA: < code> $ ( awk -F "  "  ' / Senha / {print $ 2} '  $ _file2 ) </code> \ nLIMITE: $ ( awk -F "  "  ' / Limit / {print $ 2} '  $ _file2 ) \ nEXPIRA EM : $ ( awk -F "  "  '/ Validade / {print $ 2} '  $ _file2) " )"\
        --parse_mode html
    [[ -e  " / root / $ ( awk -F "  "  ' / Nome / {print $ 2} '  $ _file2 ) .ovpn " ]] && {
        ShellBot.sendDocument --chat_id $ {message_from_id [$ id]} \
            --document " @ / root / $ ( awk -F "  "  ' / Nome / {print $ 2} '  $ _file2 ) .ovpn "
    }
}

otimizer () {
    [[ " $ {callback_query_from_id [$ id]} "  ! =  " $ id_admin " ]] && {
        ShellBot.sendMessage --chat_id $ {callback_query_message_chat_id [$ id]} \
            --text " $ ( echo -e üö´ ACCESS DENIED üö´ ) "
        return 0
    }
    MEM1 = $ ( free | awk ' / Mem: / {print int (100 * $ 3 / $ 2)} ' )
    ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
        --text " üßπ CLEARING CACHE DO SERVER "
    apt-get autoclean -y
    echo 3 > / proc / sys / vm / drop_caches
    sync && sysctl -w vm.drop_caches = 3 1> / dev / null 2> / dev / null
    sysctl -w vm.drop_caches = 0 1> / dev / null 2> / dev / null
    swapoff -a
    swapon -a
    ram1 = $ ( free -h | grep -i mem | awk { ' print $ 2 ' } )
    ram2 = $ ( free -h | grep -i mem | awk { ' print $ 3 ' } )
    ram3 = $ ( free -h | grep -i mem | awk { ' print $ 4 ' } )
    MEM2 = $ ( free | awk ' / Mem: / {print int (100 * $ 3 / $ 2)} ' )
    res = $ ( expr $ MEM1 - $ MEM2 )
    local success
    sucess = " = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = \ n "
    success + = " <b> OMITTED COM SUCCESS! </b> \ n "
    sucess + = " = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = \ n \ n "
    success + = " <i> Previous last </i> $ MEM1 % \ n \ n "
    success + = " <b> Total Ram Memory </b> $ ram1 \ n "
    sucess + = " <b> free </b> $ ram3 \ n "
    sucess + = " <b> Em use </b> $ ram2 \ n "
    success + = " <i> Ultilizacao current </i> $ MEM2 % \ n \ n "
    success + = " <b> Economy of: </b> $ res % "
    ShellBot.sendMessage --chat_id $ id_admin \
        --text " $ ( echo -e $ sucess ) " \
        --parse_mode html
    return 0
}

speed_test () {
    [[ " $ {callback_query_from_id [$ id]} "  ! =  " $ id_admin " ]] && {
        ShellBot.sendMessage --chat_id $ {callback_query_message_chat_id [$ id]} \
            --text " $ ( echo -e üö´ ACCESS DENIED üö´ ) "
        return 0
    }
    rm -rf $ HOME / speed > / dev / null 2> & 1
    ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
        --text " üöÄ TESTING DO SERVER SPEED "
    speedtest --share > speed
    png = $ ( cat speed | sed -n ' 5 p '  | awk -F : { ' print $ NF ' } )
    down = $ ( cat speed | sed -n ' 7 p '  | awk -F : { ' print $ NF ' } )
    upl = $ ( cat speed | sed -n ' 9 p '  | awk -F : { ' print $ NF ' } )
    lnk = $ ( cat speed | sed -n ' 10p '  | awk { ' print $ NF ' } )
    local msg
    msg = " = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = \ n "
    msg + = " <b> üöÄ SERVER DO SPEED üöÄ </b> \ n "
    msg + = " = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = \ n \ n "
    msg + = " <b> PING / LATENCY: </b> $ png \ n "
    msg + = " <b> DOWNLOAD: </b> $ down \ n "
    msg + = " <b> UPLOAD: </b> $ upl \ n "
    ShellBot.sendMessage --chat_id $ id_admin \
        --text " $ ( echo -e $ msg ) " \
        --parse_mode html
    ShellBot.sendMessage --chat_id $ id_admin \
        --text " $ ( echo -e $ lnk ) " \
        --parse_mode html
    rm -rf $ HOME / speed > / dev / null 2> & 1
    return 0
}

backup_users () {
    [[ " $ {callback_query_from_id [$ id]} "  ! =  " $ id_admin " ]] && {
        ShellBot.sendMessage --chat_id $ {callback_query_message_chat_id [$ id]} \
            --text " $ ( echo -e üö´ ACCESS DENIED üö´ ) "
        return 0
    }
    rm /root/backup.vps 1> / dev / null 2> / dev / null
    ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
        --text " ‚ôªÔ∏è CREATING USER BACKUP "
    tar cvf /root/backup.vps /root/users.db / etc / shadow / etc / passwd / etc / group / etc / gshadow / etc / bot / etc / SSHPlus / senha 1> / dev / null 2> / dev / null
    ShellBot.sendDocument --chat_id $ {id_admin} \
        --document " @ / root / backup.vps " \
        --caption " $ ( echo -e " ‚ôªÔ∏è BACKUP OF USERS ‚ôªÔ∏è " ) "
    return 0
}

sobremim () {
    local msg
    msg = " = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = \ n "
    msg + = " <b> ü§ñ BOT SSHPLUS MANAGER ü§ñ </b> \ n "
    msg + = " = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = \ n \ n "
    msg + = " <b> Developed by: </b> @crazy_vpn \ n "
    msg + = " <b> Official Channel: </b> @SSHPLUS \ n \ n "
    msg + = " I was created for the purpose of providing information and resources for VPN management on servidores GNU / Linux üêß servers. \ n \ n "
    msg + = " <b> Menu: </b> / menu \ n "
    ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
        --text " $ ( echo -e $ msg ) " \
        --parse_mode html
    return 0
}

fun_add_teste () {
    if [[ " $ ( grep -wc $ {callback_query_from_username}  $ hangs ) "  ! =  ' 0 ' ]] ;  then
        ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
            --text " ‚ö†Ô∏è VC IS SUSPENDED! CONTATE OR ADMINISTRATOR "
        return 0
    elif [[ " $ {callback_query_from_id [$ id]} "  ==  " $ id_admin " ]] ;  then
        ShellBot.sendMessage --chat_id $ {callback_query_message_chat_id [$ id]} \
            --text " üë§ CREATE TEST üë§ \ n \ nHow many hours should EX: 1 last: " \
            --reply_markup " $ ( ShellBot.ForceReply ) "
    elif [[ " $ ( grep -wc $ {callback_query_from_username}  $ atives ) "  ! =  ' 0 ' ]] ;  then
        _limTotal = $ ( grep -w " $ {callback_query_from_username} "  $ ativos  | awk ' {print $ 4} ' )
        fun_verif_limite_rev $ {callback_query_from_username}
        _limsomarev2 = $ ( echo " $ _result + 1 "  | bc )
        [[ " $ _limsomarev2 "  -gt  " $ _limTotal " ]] && {
            ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
                --text " ‚ùå VC NAO TEM LIMITE AVAILABLE! "
            return 0
        } || {
            ShellBot.sendMessage --chat_id $ {callback_query_message_chat_id [$ id]} \
                --text " üë§ CREATE TEST üë§ \ n \ nHow many hours should EX: 1 last: " \
                --reply_markup " $ ( ShellBot.ForceReply ) "
        }
    else
        ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
            --text " üö´ ACCESS DENIED üö´ "
        return 0
    fi
}

fun_teste () {
    user = $ ( echo test $ (( RANDOM %  + 500 )) )
    senha = ' 1234 '
    limit = ' 1 '
    t_time = $ 1
    ex_date = $ ( date ' +% d /% m /% C% y ' -d " +2 days " )
    tuserdate = $ ( date ' +% C% y /% m /% d ' -d " +2 days " )
    [[ -z  $ t_time ]] && {
        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
            --text " $ ( echo -e " ‚ùå Erro tente novamente " ) " \
            --parse_mode html
        return 0
        _erro = ' 1 '
    }
    / usr / sbin / useradd -M -N -s / bin / false $ user -e $ tuserdate  > / dev / null 2> & 1
    (
        echo  " $ senha "
        echo  " $ senha "
    ) | passwd $ user  > / dev / null 2> & 1
    echo  " $ senha "  > / etc / SSHPlus / senha / $ user
    echo  " $ user  $ limit "  >> /root/users.db
    [[ " $ {message_from_id [$ id]} "  ! =  " $ id_admin " ]] && {
        echo  " $ user : $ senha : $ ex_date : $ limit "  > / etc / bot / resell / $ {message_from_username} / users / $ user
    }
    dir_teste = " / etc / bot / resell / $ {message_from_username} / users / $ user "
    cat << - EOF > /etc/SSHPlus/userteste/$usuario.sh
	#! / bin / bash
	# USER TESTE
	[[\ $ (ps -u "$ user" | grep -c sshd)! = '0']] && pkill -u $ user
	userdel --force $ user
	grep -v ^ $ user [[: space:]] /root/usarios.db> / tmp / ph; cat / tmp / ph> /root/usuarios.db
	[[-e $ teste_dir]] && rm $ teste_dir
	rm / etc / SSHPlus / senha / $ user> / dev / null 2> & 1
	rm /etc/SSHPlus/userteste/$usuario.sh
	EOF
    chmod + x / etc / SSHPlus / userteste / $ user .sh
    echo  " / etc / SSHPlus / userteste / $ user .sh "  | at now + $ t_time hour > / dev / null 2> & 1
    [[ " $ t_time "  ==  ' 1 ' ]] && hrs = " hour "  || hrs = " hours "
    [[ " $ ( ls / etc / bot / files | wc -l ) "  ! =  ' 0 ' ]] && {
        for  arqv  in  $ ( ls / etc / bot / files ) ;  do
            ShellBot.sendDocument --chat_id $ {message_from_id [$ id]} \
                --document " @ / etc / bot / files / $ arqv " \
                --caption " $ ( echo -e " ‚úÖ Raised as successor ‚úÖ \ n \ nUSER: <code> $ user </code> \ nSENHA: <code> 1234 </code> \ n \ n‚è≥ Expires em: $ t_time  $ hrs " ) " \
                --parse_mode html
        done
        return 0
    } || {
        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
            --text " $ ( echo -e " ‚úÖ <b> Raised with success </b> ‚úÖ \ n \ nIP: $ ( cat / etc / IP ) \ nUSER: <code> $ user </code> \ nSENHA: <code> 1234 </code> \ n \ n‚è≥ Expires em: $ t_time  $ hrs " ) " \
            --parse_mode html
        return 0
    }
}

fun_exp_user () {
    if [[ " $ {callback_query_from_id [$ id]} "  ==  " $ id_admin " ]] ;  then
        [[ $ ( cat /root/users.db | wc -l )  ==  ' 0 ' ]] && {
            ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
                --text " VC AINDA NAO CRIOU USER! "
            return 0
        }
        datenow = $ ( date +% s )
        for  user  in  $ ( cat / etc / passwd | awk -F :  ' $ 3> = 1000 {print $ 1} '  | grep -v nobody ) ;  do
            expdate = $ ( chage -l $ user  | awk -F: ' / Account expires / {print $ 2} ' )
            echo  $ expdate  | grep -q never &&  continue
            datanormal = $ ( date -d " $ expdate "  ' +% d /% m /% Y ' )
            expsec = $ ( date +% s --date = " $ expdate " )
            diff = $ ( echo $ datenow - $ expsec  | bc -l )
            echo  $ diff  | grep -q ^ \ -  &&  continue
            pkill -u $ user
            userdel --force $ user
            grep -v ^ $ user [[: space:]] /root/usuarios.db > / tmp / ph
            cat / tmp / ph > /root/usuarios.db
            [[ -e / etc / bot / info-users / $ user ]] && rm / etc / bot / info-users / $ user
            [[ -e / etc / SSHPlus / userteste / $ user .sh]] && rm / etc / SSHPlus / userteste / $ user .sh
            [[ " $ ( ls / etc / bot / resell ) "  ! =  ' 0 ' ]] && {
                for  ex  in  $ ( ls / etc / bot / resell ) ;  do
                    [[ -e / etc / bot / resell / $ exp / users / $ user ]] && rm / etc / bot / resell / $ ex / users / $ user
                done
            }
        done
        ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
            --text " ‚åõÔ∏è EXPIRED SSH USERS REMOVED "
        return 0
    elif [[ " $ ( grep -wc " $ {callback_query_from_username} "  $ ativos ) "  ! =  ' 0 ' ]] ;  then
        [[ " $ ( grep -wc $ {callback_query_from_username}  $ hangs ) "  ! =  ' 0 ' ]] && {
            ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
                --text " ‚ö†Ô∏è VC IS SUSPENDED! CONTATE OR ADMINISTRATOR "
            return 0
        }
        [[ $ ( ls / etc / bot / resell / $ {callback_query_from_username} / users | wc -l )  ==  ' 0 ' ]] && {
            ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
                --text " VC AINDA NAO CRIOU USER! "
            return 0
        }
        datenow = $ ( date +% s )
        dir_user = " / etc / bot / resell / $ {callback_query_from_username} / users "
        for  user  in  $ ( ls $ dir_user ) ;  do
            expdate = $ ( chage -l $ user  | awk -F: ' / Account expires / {print $ 2} ' )
            echo  $ expdate  | grep -q never &&  continue
            datanormal = $ ( date -d " $ expdate "  ' +% d /% m /% Y ' )
            expsec = $ ( date +% s --date = " $ expdate " )
            diff = $ ( echo $ datenow - $ expsec  | bc -l )
            echo  $ diff  | grep -q ^ \ -  &&  continue
            pkill -f $ user
            userdel --force $ user
            grep -v ^ $ user [[: space:]] /root/usuarios.db > / tmp / ph
            cat / tmp / ph > /root/usuarios.db
            [[ -e / etc / SSHPlus / userteste / $ user .sh]] && rm / etc / SSHPlus / userteste / $ user .sh
            [[ -e  " $ dir_user / $ user " ]] && rm $ dir_user / $ user
        done
        ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
            --text " ‚åõÔ∏è EXPIRED SSH USERS REMOVED "
        return 0
    else
        ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
            --text " $ ( echo -e üö´ ACCESS DENIED üö´ ) "
        return 0
    fi
}

relatorio_rev () {
    if [[ " $ {callback_query_from_id [$ id]} "  =  " $ id_admin " ]] ;  then
        _ons = $ ( ps -x | grep sshd | grep -v root | grep priv | wc -l )
        _tuser = $ ( awk -F: ' $ 3> = 1000 {print $ 1} ' / etc / passwd | grep -v nobody | wc -l )
        [[ -e /etc/openvpn/openvpn-status.log]] && _onop = $ ( grep -c " 10.8.0 " /etc/openvpn/openvpn-status.log )  || _onop = " 0 "
        [[ -e / etc / default / dropbear]] && _drp = $ ( ps aux | grep dropbear | grep -v grep | wc -l ) _ondrp = $ (( $ _drp  -  1 ))  || _ondrp = " 0 "
        _onli = $ (( $ _ons  +  $ _onop  +  $ _ondrp ))
        _cont_rev = $ ( echo $ ( grep -wc resell $ assets ) - $ ( grep -wc resell $ suspensions )  | bc )
        _cont_sus = $ ( grep -wc resell $ suspensions )
        _cont_sub = $ ( grep -wc subsell $ assets )
        _cont_revt = $ ( grep -wc resell $ assets )
        local msg
        msg = " = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = \ n "
        msg + = " <b> üìä RECORD | INFORMACOES </b> \ n "
        msg + = " = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = \ n \ n "
        msg + = " <b> Total users: </b> $ _tuser \ n "
        msg + = " <b> Online users: </b> $ _onli \ n "
        msg + = " <b> Active Resells: </b> $ _cont_rev \ n "
        msg + = " <b> Suspensions Resale: </b> $ _cont_sus \ n "
        msg + = " <b> Sub-Resales: </b> $ _cont_sub \ n \ n "
        msg + = " <b> User: </b> @ $ {callback_query_from_username} \ n "
        msg + = " <b> ID: </b> <code> $ {callback_query_from_id} </code> \ n "
        [[ $ _cont_revt  ! =  ' 0 ' ]] && {
            ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
                --text " üìä CREATING A RAPPORTEUR! "
        } || {
            ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
                --text " ‚ö†Ô∏è DEALER NENHUM FOUND! "
            return 0
        }
        echo -e " RECORD OF TWO RESELLERS \ n \ nTotal: $ _cont_revt   -   $ ( printf ' Data:% (% d /% m /% Y) T \ n ' ) \ n = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = "  > /tmp/Relatorio.txt
        while  read _revlist ;  do
            _nome_rev = " $ ( echo $ _revlist  | awk ' {print $ 2} ' ) "
            _limite_rev = " $ ( echo $ _revlist  | awk ' {print $ 4} ' ) "
            _data_rev = " $ ( echo $ _revlist  | awk ' {print $ 6} ' ) "
            [[ -e  " / etc / bot / resell / $ _nome_rev / $ _nome_rev " ]] && {
                _dirsts = ' resell '
                _status = ' Active '
            } || {
                _dirsts = ' suspended '
                _status = ' Suspense '
            }
            _subrev = " $ ( grep -wc SUBSALES / etc / bot / $ _dirsts / $ _nome_rev / $ _nome_rev ) "
            fun_on () {
                for  user  in  $ ( ls / etc / bot / $ _dirsts / $ _nome_rev / users ) ;  do
                    [[ $ ( netstat -nltp | grep ' dropbear '  | wc -l )  ! =  ' 0 ' ]] && drop = " $ ( fun_drop | grep " $ user "  | wc -l ) "  || drop = 0
                    [[ -e /etc/openvpn/openvpn-status.log]] && ovp = " $ ( cat /etc/openvpn/openvpn-status.log | grep -E, " $ user " , | wc -l ) "  | | ovp = 0
                    sqd = " $ ( ps -u $ user  | grep sshd | wc -l ) "
                    conne = $ (( $ sqd  +  $ ovp  +  $ drop ))
                    echo -e " $ connection "
                done
            }
            [[ " $ ( ls / etc / bot / $ _dirsts / $ _nome_rev / users | wc -l ) "  ! =  ' 0 ' ]] && {
                total_on = $ ( fun_on | paste -s -d + | bc )
                total_users = $ ( ls / etc / bot / $ _dirsts / $ _nome_rev / users | wc -l )
            } || {
                total_on = ' 0 '
                total_users = ' 0 '
            }
            echo -e " \ nSTATUS: $ _status \ nRESELLER: @ $ _nome_rev \ nLIMITE: $ _limite_rev \ nDAYS REMAINING: $ _data_rev \ nSSH SERVED: $ total_users \ nSSH ONLINE: $ total_on \ nSUB-RESELLS: $ _subrev \ n √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = "  >> /tmp/Relatorio.txt
        done  <<< " $ (grep -w 'resell' $ assets) "
        ShellBot.sendDocument --chat_id $ id_admin \
            --document " @ / tmp / Relatorio.txt " \
            --caption " $ ( echo -e " $ msg " ) " \
            --parse_mode html
        return 0
    elif [[ " $ ( grep -wc $ {callback_query_from_username}  $ atives ) "  ! =  ' 0 ' ]] ;  then
        [[ " $ ( grep -wc $ {callback_query_from_username}  $ hangs ) "  ! =  ' 0 ' ]] && {
            ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
                --text " ‚ö†Ô∏è VC IS SUSPENDED! CONTATE OR ADMINISTRATOR "
            return 0
        }
        [[ $ ( grep -wc ' SUBSELL ' / etc / bot / resell / $ {callback_query_from_username} / $ {callback_query_from_username} )  ==  ' 0 ' ]] && {
            ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
                --text " ‚ö†Ô∏è NENHUM SUB DEALER FOUND! "
            _cont_limite = $ ( grep -w $ {callback_query_from_username}  $ ativos  | awk ' {print $ 4} ' )
            fun_verif_limite_rev $ {callback_query_from_username}
            _cont_disp = $ ( echo $ _cont_limite - $ _result  | bc )
            local msg
            msg = " = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = \ n "
            msg + = " <b> üìä RECORD | INFORMACOES </b> \ n "
            msg + = " = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = \ n \ n "
            msg + = " <b> Logins limit: </b> $ _cont_limite \ n "
            msg + = " <b> Limit Available Level: </b> $ _cont_disp \ n "
            ShellBot.sendMessage --chat_id $ {callback_query_message_chat_id [$ id]} \
                --text " $ msg " \
                --parse_mode html
            return 0
        }
        fun_contsub () {
            while  read _sublist ;  do
                _usub = " $ ( echo $ _sublist  | awk ' {print $ 2} ' ) "
                echo  $ ( grep -wc $ _usub  $ suspensions )
            done  <<< " $ (grep -w 'SUBSELL' / etc / bot / resell / $ {callback_query_from_username} / $ {callback_query_from_username}) "
        }
        _cont_limite = $ ( grep -w $ {callback_query_from_username}  $ ativos  | awk ' {print $ 4} ' )
        fun_verif_limite_rev $ {callback_query_from_username}
        _cont_disp = $ ( echo $ _cont_limite - $ _result  | bc )
        _cont_atv = $ ( grep -wc SUBSALES / etc / bot / resell / $ {callback_query_from_username} / $ {callback_query_from_username} )
        _cont_sup = $ ( fun_contsub | paste -s -d + | bc )
        local msg
        msg = " = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = \ n "
        msg + = " <b> üìä RECORD | INFORMACOES </b> \ n "
        msg + = " = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = \ n \ n "
        msg + = " <b> Logins limit: </b> $ _cont_limite \ n "
        msg + = " <b> Limit Available Level: </b> $ _cont_disp \ n "
        msg + = " <b> Total Sub-Resales: </b> $ _cont_atv \ n "
        msg + = " <b> Suspended Sub-Resales: </b> $ _cont_sup \ n "
        msg + = " <b> User: </b> @ $ {callback_query_from_username} \ n "
        msg + = " <b> ID: </b> <code> $ {callback_query_from_id} </code> \ n "
        echo -e " RECORD OF TWO SUB-RESELLERS \ n \ nTotal: $ _cont_atv   -   $ ( printf ' Data:% (% d /% m /% Y) T \ n ' ) \ n = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = "  > / tmp / Relatory- $ {callback_query_from_username} .txt
        while  read _sublist ;  do
            _usub = " $ ( echo $ _sublist  | awk ' {print $ 2} ' ) "
            _limit_sub = $ ( echo $ _sublist  | awk ' {print $ 4} ' )
            _data_sub = $ ( grep -w $ _usub  $ ativos  | awk ' {print $ 6} ' )
            [[ -e  " / etc / bot / resell / $ _usub / $ _usub " ]] && {
                _dirsts = ' resell '
                _status = ' Active '
            } || {
                _dirsts = ' suspended '
                _status = ' Suspense '
            }
            fun_subon () {
                for  user  in  $ ( ls / etc / bot / $ _dirsts / $ _usub / users ) ;  do
                    [[ $ ( netstat -nltp | grep ' dropbear '  | wc -l )  ! =  ' 0 ' ]] && drop = " $ ( fun_drop | grep " $ user "  | wc -l ) "  || drop = 0
                    [[ -e /etc/openvpn/openvpn-status.log]] && ovp = " $ ( cat /etc/openvpn/openvpn-status.log | grep -E, " $ user " , | wc -l ) "  | | ovp = 0
                    sqd = " $ ( ps -u $ user  | grep sshd | wc -l ) "
                    conne = $ (( $ sqd  +  $ ovp  +  $ drop ))
                    echo -e " $ connection "
                done
            }
            [[ " $ ( ls / etc / bot / $ _dirsts / $ _usub / users | wc -l ) "  ! =  ' 0 ' ]] && {
                total_on = $ ( fun_on | paste -s -d + | bc )
                total_users = $ ( ls / etc / bot / $ _dirsts / $ _usub / users | wc -l )
            } || {
                total_on = ' 0 '
                total_users = ' 0 '
            }
            echo -e " \ nSTATUS: $ _status \ nSUB-RESELLER: @ $ _usub \ nLIMITE: $ _limit_sub \ nDAYS REMAINING: $ _data_sub \ nSSH SERVERS: $ total_users \ nSSH ONLINE: $ total_on \ n \ n = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = "  >> / tmp / Relatory- $ {callback_query_from_username} .txt
        done  <<< " $ (grep -w 'SUBSELL' / etc / bot / resell / $ {callback_query_from_username} / $ {callback_query_from_username}) "
        ShellBot.sendDocument --chat_id $ {callback_query_message_chat_id [$ id]} \
            --document " @ / tmp / Relation- $ {callback_query_from_username} .txt " \
            --caption " $ ( echo -e " $ msg " ) " \
            --parse_mode html
        return 0
    else

        ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
            --text " üö´ ACCESS DENIED üö´ "
        return 0
    fi
}

fun_backauto () {
    [[ " $ {callback_query_from_id [$ id]} "  =  " $ id_admin " ]] && {
        [[ !  -d / etc / SSHPlus / backups]] && {
            mkdir / etc / SSHPlus / backups
            [[ $ ( crontab -l | grep -c " userbackup " )  =  ' 0 ' ]] && (
                crontab -l 2> / dev / null
                echo  " 0 * / 6 * * * / bin / userbackup 1 "
            ) | crontab -
            s
            ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
                --text " ‚ôªÔ∏è AUTOMATIC BACKUP ENABLED üü¢ "
            return 0
        } || {
            [[ $ ( crontab -l | grep -c " userbackup " )  ! =  ' 0 ' ]] && crontab -l | grep -v ' userbackup '  | crontab -
            [[ -d / etc / SSHPlus / backups]] && rm -rf / etc / SSHPlus / backups
            ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
                --text " ‚ôªÔ∏è AUTOMATIC BACKUP DISABLED üî¥ "
            return 0
        }
    }
}

backup_auto () {
    ShellBot.sendDocument --chat_id $ id_admin \
        --document " @ / etc / SSHPlus / backups / backup.vps " \
        --caption " $ ( echo -e " ‚ôªÔ∏è AUTOMATIC BACKUP ‚ôªÔ∏è " ) "
    rm /etc/SSHPlus/backups/backup.vps
    return 0
}

restore_backup () {
    [[ $ {message_from_id [$ id]}  ==  $ {id_admin} ]] && {
        [[ " $ {message_document_file_name} "  ! =  ' backup.vps ' ]] &&  return 0
        local file_id
        file_id = $ {message_document_file_id [$ id]}
        if [[ $ file_id ]] ;  then
            [[ -e /tmp/backup.vps]] && rm /tmp/backup.vps
            [[ " $ ( ls / tmp | grep -c ' .vps ' ) "  ! =  ' 0 ' ]] && {
                for  i  in  $ ( ls / tmp | grep ' .vps ' ) ;  do
                    rm / tmp / $ i
                done
            }
            ShellBot.getFile --file_id $ file_id
            if ShellBot.downloadFile --file_path " $ {return [file_path]} " --dir " / tmp " ;  then
                msg = ' <b> ‚ôªÔ∏è BACKUP FILE ‚ôªÔ∏è </b> \ n \ n <i> Or file sent to a user backup file \ n! </i> '
                ShellBot.sendMessage --chat_id $ {id_admin} \
                    --text " $ ( echo -e " $ msg " ) " \
                    --parse_mode html
                ShellBot.sendMessage --chat_id $ {id_admin} \
                    --text ' Do you want to restore? [sim | nao] ' \
                    --reply_markup " $ ( ShellBot.ForceReply ) "
            fi
        fi
        return 0
    }
}
msg_bem_vindo () {
    local msg
    msg = " ‚úåÔ∏èüòÉ Wave <b> $ {message_from_first_name [$ id]} </b> \ n \ nSEJA BEM VINDO (a) \ n \ n "
    msg + = " To access the menu \ nclick or execute [/ menu] \ n \ n "
    msg + = " To get information \ nclick ou execute [/ ajuda] \ n \ n "
    ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
        --text " $ ( echo -e $ msg ) " \
        --parse_mode html
    return 0
}

fun_verif_limite_rev () {
    _userrev = $ 1
    [[ " $ ( grep -w " $ _userrev "  $ ativos  | awk ' {print $ NF} ' ) "  ==  ' resell ' ]] && {
        echo  $ _userrev
        [[ $ ( grep -wc ' SUBSELL ' / etc / bot / resell / $ _userrev / $ _userrev )  ! =  ' 0 ' ]] && {
            _limsomarev = $ ( grep -w ' SUBSALES ' / etc / bot / resell / $ _userrev / $ _userrev  | awk { ' print $ 4 ' } | paste -s -d + | bc )
        } || {
            _limsomarev = ' 0 '
        }
        [[ $ ( ls / etc / bot / resell / $ _userrev / users | wc -l )  ! =  ' 0 ' ]] && {
            _mlim1 = ' 0 '
            _meus_users = " / etc / bot / resell / $ _userrev / users "
            for  _user_  in  $ ( ls $ _meus_users ) ;  do
                _mlim2 = $ ( cat $ _meus_users / $ _user_  | awk -F : { ' print $ 4 ' } )
                _mlim1 = $ ( echo " $ {_ mlim1} + $ {_ mlim2} "  | bc )
            done
        }
        [[ -z  " $ _mlim1 " ]] && _mlim1 = ' 0 '
        _result = $ ( echo " $ {_ limsomarev} + $ {_ mlim1} "  | bc )
    }
    [[ " $ ( grep -w " $ _userrev "  $ ativos  | awk ' {print $ NF} ' ) "  ==  ' sublet ' ]] && {
        [[ " $ ( ls / etc / bot / resell / $ _userrev / users | wc -l ) "  ! =  ' 0 ' ]] && {
            _dir_users = " / etc / bot / resell / $ _userrev / users "
            _lim1 = ' 0 '
            for  i  in  $ ( ls $ _dir_users ) ;  do
                _lim2 = $ ( cat $ _dir_users / $ i  | awk -F : { ' print $ 4 ' } )
                _lim1 = $ ( echo " $ {_ lim1} + $ {_ lim2} "  | bc )
            done
        }
        [[ -z  " $ _lim1 " ]] && _lim1 = ' 0 '
        _result = $ ( echo " $ {_ lim1} " )
    }
}

fun_add_revenda () {
    [[ " $ ( grep -wc $ {callback_query_from_username}  $ hangs ) "  ! =  ' 0 ' ]] && {
        ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
            --text " ‚ö†Ô∏è VC IS SUSPENDED! CONTATE OR ADMINISTRATOR "
        return 0
    }
    [[ " $ {callback_query_from_id [$ id]} "  ==  " $ id_admin " ]] || [[ " $ ( grep -wc $ {callback_query_from_username}  $ assets ) "  ! =  ' 0 ' ]] && {
        ShellBot.sendMessage --chat_id $ {callback_query_message_chat_id [$ id]} \
            --text " üë• ADD RESELLER üë• \ n \ nReport or nome: " \
            --reply_markup " $ ( ShellBot.ForceReply ) "
    } || {
        ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
            --text " üö´ ACCESS DENIED üö´ "
        return 0
    }
}

raise_rev () {
    file_rev = $ 1
    [[ -z  " $ file_rev " ]] && {
        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
            --text " $ ( echo -e Erro ) "
        _erro = ' 1 '
        break
    }
    n_rev = $ ( sed -n ' 1 p '  $ file_rev  | cut -d '  ' -f2 )
    u_rev = $ ( sed -n ' 2 p '  $ file_rev  | awk -F ' @ ' { ' print $ 2 ' } )
    l_rev = $ ( sed -n ' 3 p '  $ file_rev  | cut -d '  ' -f2 )
    d_rev = $ ( sed -n ' 4 p '  $ file_rev  | cut -d '  ' -f2 )
    [[ " $ {message_from_id [$ id]} "  =  " $ id_admin " ]] && {
        t_rev = ' resell '
    } || {
        t_rev = ' sublet '
        echo -e " SUBSALES: $ u_rev LIMIT_SUBSALES: $ l_rev "  >> / etc / bot / resell / $ {message_from_username} / $ {message_from_username}
    }
    mkdir / etc / bot / resell / " $ u_rev "
    mkdir / etc / bot / resell / " $ u_rev " / users
    touch / etc / bot / resell / " $ u_rev " / $ u_rev
    echo -e " USER: $ u_rev LIMIT : $ l_rev DAYS: $ d_rev TYPE: $ t_rev "  >> $ assets
    echo -e " ========================= \ nLIMIT_RESOURCE: $ l_rev \ nDIAS_RESOURCE: $ d_rev \ n ========= ================ \ n "  > / etc / bot / resell / " $ u_rev " / $ u_rev
    sed -i ' $ d '  $ file_rev
    echo -e " Due date : $ ( date " +% d /% m /% Y " -d " + $ d_rev days " ) "  >> $ file_rev
}

fun_del_rev () {
    [[ " $ ( grep -wc $ {callback_query_from_username}  $ hangs ) "  ! =  ' 0 ' ]] && {
        ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
            --text " ‚ö†Ô∏è VC IS SUSPENDED! CONTATE OR ADMINISTRATOR "
        return 0
    }
    [[ " $ {callback_query_from_id [$ id]} "  ==  " $ id_admin " ]] || [[ " $ ( grep -wc $ {callback_query_from_username}  $ assets ) "  ! =  ' 0 ' ]] && {
        ShellBot.sendMessage --chat_id $ {callback_query_message_chat_id [$ id]} \
            --text " üóë REMOVE RESELLER üóë \ n \ nReport or user dele [Ex: @crazy_vpn]: " \
            --reply_markup " $ ( ShellBot.ForceReply ) "
    } || {
        ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
            --text " üö´ ACCESS DENIED üö´ "
        return 0
    }
}

del_rev () {
    _cli_rev = $ 1
    [[ -z  " $ _cli_rev " ]] && {
        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
            --text " $ ( echo -e " Erro " ) "
        return 0
    }
    [[ " $ {message_from_id [$ id]} "  ==  " $ id_admin " ]] && {
        [[ " $ ( grep -wc " $ _cli_rev "  $ atives ) "  ! =  ' 0 ' ]] && {
            [[ -e  " / etc / bot / resell / $ _cli_rev / $ _cli_rev " ]] && _dirsts = ' resell '  || _dirsts = ' suspended '
            [[ " $ ( grep -wc ' SUBSALES ' / etc / bot / $ _dirsts / $ _cli_rev / $ _cli_rev ) "  ! =  ' 0 ' ]] && {
                while  read _listsub2 ;  do
                    _usub = " $ ( echo $ _listsub2  | awk ' {print $ 2} ' ) "
                    [[ -e  " / etc / bot / resell / $ _usub / $ _usub " ]] && _dirsts2 = ' resell '  || _dirsts2 = ' suspended '
                    _dir_users = " / etc / bot / $ _dirsts2 / $ _usub / users "
                    [[ " $ ( ls $ _dir_users  | wc -l ) "  ! =  ' 0 ' ]] && {
                        for  _user  in  $ ( ls $ _dir_users ) ;  do
                            piduser = $ ( ps -u " $ _user "  | grep sshd | cut -d ? -f1 )
                            kill -9 $ piduser  > / dev / null 2> & 1
                            userdel --force " $ _user "  2> / dev / null
                            grep -v ^ $ _user [[: space:]] /root/usuarios.db > / tmp / ph
                            cat / tmp / ph > /root/usuarios.db
                            rm / etc / bot / info-users / $ _user
                        done
                    }
                    [[ -d / etc / bot / $ _dirsts2 / $ _usub ]] && rm -rf / etc / bot / $ _dirsts2 / $ _usub  > / dev / null 2> & 1
                    sed -i " / \ b $ _usub \ b / d "  $ ativos
                    [[ $ ( Grep -wc " $ _usub "  $ suspended )  ! =  ' 0 ' ]] && {
                        sed -i " / \ b $ _usub \ b / d "  $ suspensions
                    }
                done  <<< " $ (grep -w 'SUBSALES' / etc / bot / $ _ dirsts / $ _ cli_rev / $ _ cli_rev) "
            }
            [[ " $ ( ls / etc / bot / $ _dirsts / $ _cli_rev / users | wc -l ) "  ! =  ' 0 ' ]] && {
                for  _user  in  $ ( ls / etc / bot / $ _dirsts / $ _cli_rev / users ) ;  do
                    piduser = $ ( ps -u " $ _user "  | grep sshd | cut -d ? -f1 )
                    kill -9 $ piduser  > / dev / null 2> & 1
                    userdel --force " $ _user "  2> / dev / null
                    grep -v ^ $ _user [[: space:]] /root/usuarios.db > / tmp / ph
                    cat / tmp / ph > /root/usuarios.db
                    rm / etc / bot / info-users / $ _user
                done
            }
            [[ -d / etc / bot / $ _dirsts / $ _cli_rev ]] && rm -rf / etc / bot / $ _dirsts / $ _cli_rev  > / dev / null 2> & 1
            sed -i " / \ b $ _cli_rev \ b / d "  $ ativos
            [[ $ ( Grep -wc " $ _cli_rev "  $ suspended )  ! =  ' 0 ' ]] && {
                sed -i " / \ b $ _cli_rev \ b / d "  $ suspensions
            }
            ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                --text " $ ( echo -e " REMOVED COM SUCCESS " ) " \
                --parse_mode html
            return 0
        } || {
            ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                --text " $ ( echo -e ‚ùå RESELLER NAO EXISTS ‚ùå ) "
            return 0
        }
    } || {
        [[ " $ ( grep -wc " $ _cli_rev " / etc / bot / resell / $ {message_from_username} / $ {message_from_username} ) "  ! =  ' 0 ' ]] && {
            [[ -d / etc / bot / resell / $ _cli_rev ]] && {
                [[ " $ ( ls / etc / bot / resell / $ _cli_rev / users | wc -l ) "  ! =  ' 0 ' ]] && {
                    for  _user  in  $ ( ls / etc / bot / resell / $ _cli_rev / users ) ;  do
                        piduser = $ ( ps -u " $ _user "  | grep sshd | cut -d ? -f1 )
                        kill -9 $ piduser  > / dev / null 2> & 1
                        userdel --force " $ _user "  2> / dev / null
                        grep -v ^ $ _user [[: space:]] /root/usuarios.db > / tmp / ph
                        cat / tmp / ph > /root/usuarios.db
                        rm / etc / bot / info-users / $ _user
                    done
                }
                [[ -d / etc / bot / resell / $ _cli_rev ]] && rm -rf / etc / bot / resell / $ _cli_rev  > / dev / null 2> & 1
                sed -i " / \ b $ _cli_rev \ b / d "  $ ativos
                sed -i " / \ b $ _cli_rev \ b / d " / etc / bot / resell / $ {message_from_username} / $ {message_from_username}
            }
            [[ -d / etc / bot / suspensos / $ _cli_rev ]] && {
                [[ " $ ( ls / etc / bot / suspensions / $ _cli_rev / users | wc -l ) "  ! =  ' 0 ' ]] && {
                    for  _user  in  $ ( ls / etc / bot / suspensos / $ _cli_rev / users ) ;  do
                        piduser = $ ( ps -u " $ _user "  | grep sshd | cut -d ? -f1 )
                        kill -9 $ piduser  > / dev / null 2> & 1
                        userdel --force " $ _user "  2> / dev / null
                        grep -v ^ $ _user [[: space:]] /root/usuarios.db > / tmp / ph
                        cat / tmp / ph > /root/usuarios.db
                        rm / etc / bot / info-users / $ _user
                    done
                }
                [[ -d / etc / bot / suspensos / $ _cli_rev ]] && rm -rf / etc / bot / suspensos / $ _cli_rev  > / dev / null 2> & 1
                sed -i " / \ b $ _cli_rev \ b / d "  $ ativos
                sed -i " / \ b $ _cli_rev \ b / d "  $ suspensions
                sed -i " / \ b $ _cli_rev \ b / d " / etc / bot / resell / $ {message_from_username} / $ {message_from_username}
            }
            ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                --text " $ ( echo -e " REMOVED COM SUCCESS " ) " \
                --parse_mode html
            return 0
        } || {
            ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                --text " $ ( echo -e ‚ùå RESELLER NAO EXISTS ‚ùå ) "
            return 0
        }
    }
}

fun_lim_rev () {
    [[ " $ ( grep -wc $ {callback_query_from_username}  $ hangs ) "  ! =  ' 0 ' ]] && {
        ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
            --text " ‚ö†Ô∏è VC IS SUSPENDED! CONTATE OR ADMINISTRATOR "
        return 0
    }
    [[ " $ {callback_query_from_id [$ id]} "  ==  " $ id_admin " ]] || [[ " $ ( grep -wc $ {callback_query_from_username}  $ assets ) "  ! =  ' 0 ' ]] && {
        ShellBot.sendMessage --chat_id $ {callback_query_message_chat_id [$ id]} \
            --text " ‚ôæ ALTER LIMIT RESELL ‚ôæ \ n \ nReport or user dele [Ex: @crazy_vpn]: " \
            --reply_markup " $ ( ShellBot.ForceReply ) "
    } || {
        ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
            --text " üö´ ACCESS DENIED üö´ "
        return 0
    }
}

lim_rev () {
    _file_lim = $ 1
    [[ -z  " $ _file_lim " ]] && {
        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
            --text " $ ( echo -e " Erro " ) "
        return 0
    }
    _rev_usern = $ ( grep -w ' Reseller '  $ _file_lim  | awk -F ' @ ' { ' print $ 2 ' } )
    new_l = $ ( grep -w ' Limit '  $ _file_lim  | awk { ' print $ 2 ' } )
    [[ -d / etc / bot / resell / $ _rev_usern ]] && {
        l_old = $ ( grep -w ' LIMITE_REVENDA ' / etc / bot / resell / $ _rev_usern / $ _rev_usern  | awk { ' print $ 2 ' } )
        sed -i " / LIMITE_REVENDA / s / $ l_old / $ new_l / g " / etc / bot / resell / $ _rev_usern / $ _rev_usern
        sed -i " / $ _rev_usern / s / LIMITE: $ l_old / LIMITE: $ new_l / "  $ ativos
        [[ " $ {message_from_id [$ id]} "  ! =  " $ id_admin " ]] && {
            sed -i " / \ b $ _rev_usern \ b / s / $ l_old / $ new_l / g " / etc / bot / resell / $ {message_from_username} / $ {message_from_username}
        }
        echo  $ _rev_usern
    } || {
        l_old = $ ( grep -w ' LIMITE_REVENDA ' / etc / bot / suspensos / $ _rev_usern / $ _rev_usern  | awk { ' print $ 2 ' } )
        sed -i " / LIMITE_REVENDA / s / $ l_old / $ new_l / g " / etc / bot / suspensos / $ _rev_usern / $ _rev_usern
        sed -i " / \ b $ _rev_usern \ b / s / LIMITE: $ l_old / LIMITE: $ new_l / "  $ ativos
        sed -i " / \ b $ _rev_usern \ b / s / LIMITE: $ l_old / LIMITE: $ new_l / "  $ suspensions
        [[ " $ {message_from_id [$ id]} "  ! =  " $ id_admin " ]] && {
            sed -i " / \ b $ _rev_usern \ b / s / $ l_old / $ new_l / " / etc / bot / resell / $ {message_from_username} / $ {message_from_username}
        }
        echo  $ _rev_usern
    }
}

fun_dat_rev () {
    [[ " $ ( grep -wc $ {callback_query_from_username}  $ hangs ) "  ! =  ' 0 ' ]] && {
        ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
            --text " ‚ö†Ô∏è VC IS SUSPENDED! CONTATE OR ADMINISTRATOR "
        return 0
    }
    [[ " $ {callback_query_from_id [$ id]} "  ==  " $ id_admin " ]] || [[ " $ ( grep -wc $ {callback_query_from_username}  $ assets ) "  ! =  ' 0 ' ]] && {
        ShellBot.sendMessage --chat_id $ {callback_query_message_chat_id [$ id]} \
            --text " üìÜ ALTER DATA RESELL üìÜ \ n \ nReport or user dele [Ex: @crazy_vpn]: " \
            --reply_markup " $ ( ShellBot.ForceReply ) "
    } || {
        ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
            --text " üö´ ACCESS DENIED üö´ "
        return 0
    }
}

dat_rev () {
    _datfile = $ 1
    [[ -z  " $ _datfile " ]] && {
        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
            --text " $ ( echo -e " Erro " ) "
        _erro = ' 1 '
        return 0
    }
    _revd = $ ( grep -w ' Reseller '  $ _datfile  | cut -d ' @ ' -f2 )
    new_d = $ ( grep -w ' Data '  $ _datfile  | awk ' {print $ NF} ' )
    [[ -d  " / etc / bot / suspensions / $ _revd " ]] && {
        [[ " $ ( ls / etc / bot / suspensions / $ _revd / users | wc -l ) "  ! =  ' 0 ' ]] && {
            for  _user  in  $ ( ls / etc / bot / suspensions / $ _revd / users ) ;  do
                usermod -U $ _user
            done
        }
        d_old = $ ( grep -w ' RESALE_DAYS ' / etc / bot / suspensions / $ _revd / $ _revd  | awk { ' print $ 2 ' } )
        sed -i " / \ b $ _revd \ b / s / DAYS: $ d_old / DAYS: $ new_d / "  $ assets
        sed -i " / DIAS_REVENDA / s / $ d_old / $ new_d / " / etc / bot / suspensos / $ _revd / $ _revd
        [[ " $ ( grep -wc ' SUBSALES ' / etc / bot / suspensions / $ _revd / $ _revd ) "  ! =  ' 0 ' ]] && {
            while  read _listsub ;  do
                _usub = " $ ( echo $ _listsub  | awk ' {print $ 2} ' ) "
                [[ " $ ( ls / etc / bot / suspens / $ _usub / users | wc -l ) "  ! =  ' 0 ' ]] && {
                    for  _user  in  $ ( ls / etc / bot / suspensions / $ _usub / users ) ;  do
                        usermod -U $ _user
                    done
                }
                mv / etc / bot / suspensos / $ _usub / etc / bot / resell / $ _usub
                sed -i " / \ b $ _usub \ b / d "  $ suspensions
            done  <<< " $ (grep -w 'SUBSELL' / etc / bot / suspensions / $ _ revd / $ _ revd) "
        }
        mv / etc / bot / suspensos / $ _revd / etc / bot / resell / $ _revd
        sed -i " / \ b $ _revd \ b / d "  $ suspensions
        sed -i " s; $ new_d ; $ ( date " +% d /% m /% Y " -d " + $ new_d days " ) ; "  $ _datfile
        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
            --text " $ ( echo -e " ‚ö†Ô∏è $ _revd IS SUSPENDED AND FOI REACTIVATED! " ) " \
            --parse_mode html
    } || {
        d_old = $ ( grep -w ' RESALE_DAYS ' / etc / bot / resell / $ _revd / $ _revd  | awk { ' print $ 2 ' } )
        sed -i " / \ b $ _revd \ b / s / DAYS: $ d_old / DAYS: $ new_d / "  $ assets
        sed -i " / DIAS_REVENDA / s / $ d_old / $ new_d / " / etc / bot / resell / $ _revd / $ _revd
        sed -i " s; $ new_d ; $ ( date " +% d /% m /% Y " -d " + $ new_d days " ) ; "  $ _datfile
    }
}

fun_list_rev () {
    [[ " $ ( grep -wc $ {callback_query_from_username}  $ hangs ) "  ! =  ' 0 ' ]] && {
        ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
            --text " ‚ö†Ô∏è VC IS SUSPENDED! CONTATE OR ADMINISTRATOR "
        return 0
    }
    if [[ " $ {callback_query_from_id [$ id]} "  ==  " $ id_admin " ]] ;  then
        local msg1
        msg1 = " = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = \ nüìÉ RESELLER LIST! \ n = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = \ n "
        [[ " $ ( grep -wc ' resell '  $ assets ) "  ! =  ' 0 ' ]] && {
            while  read _atvs ;  do
                _uativ = " $ ( echo $ _atvs  | awk ' {print $ 2} ' ) "
                [[ " $ ( grep -wc " $ _uativ "  $ suspensions ) "  ==  ' 0 ' ]] && _stsrev = ' ATTIVE '  || _stsrev = ' SUSPENSE '
                msg1 + = " ‚Ä¢ @ $ _uativ - $ _stsrev \ n "
            done  <<< " $ (grep -w 'resell' / etc / bot / asset_list) "
            ShellBot.sendMessage --chat_id $ {callback_query_message_chat_id [$ id]} \
                --text " $ ( echo -e " $ msg1 " ) " \
                --parse_mode html
            return 0
        } || {
            ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
                --text " VC NAO TEM RESELLERS "
            return 0
        }
    elif [[ " $ ( grep -w $ {callback_query_from_username}  $ assets  | awk ' {print $ NF} ' ) "  ==  ' resell ' ]] ;  then
        _patch = " / etc / bot / resell "
        local msg1
        msg1 = " = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = \ nüìÉ SUB-RESELLERS LIST! \ n = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = \ n "
        [[ " $ ( grep -wc " SUBSALES "  $ _patch / $ {callback_query_from_username} / $ {callback_query_from_username} ) "  ! =  ' 0 ' ]] && {
            while  read _listsub ;  do
                _usub = " $ ( echo $ _listsub  | awk ' {print $ 2} ' ) "
                [[ " $ ( grep -wc " $ _usub "  $ suspensions ) "  ==  ' 0 ' ]] && _usts = ' ATTIVE '  || _usts = ' SUSPENSION '
                msg1 + = " ‚Ä¢ @ $ _usub - $ _usts \ n "
            done  <<< " $ (grep -w 'SUBSELL' $ _patch / $ {callback_query_from_username} / $ {callback_query_from_username}) "
            ShellBot.sendMessage --chat_id $ {callback_query_message_chat_id [$ id]} \
                --text " $ ( echo -e " $ msg1 " ) " \
                --parse_mode html
            return 0
        } || {
            ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
                --text " VC NAO TEM SUB RESELLERS "
            return 0
        }
    else
        ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
            --text " üö´ ACCESS DENIED üö´ "
        return 0
    fi
}

fun_susp_rev () {
    [[ " $ ( grep -wc $ {callback_query_from_username}  $ hangs ) "  ! =  ' 0 ' ]] && {
        ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
            --text " ‚ö†Ô∏è VC IS SUSPENDED! CONTATE OR ADMINISTRATOR "
        return 0
    }
    [[ " $ {callback_query_from_id [$ id]} "  ==  " $ id_admin " ]] || [[ " $ ( grep -wc $ {callback_query_from_username}  $ assets ) "  ! =  ' 0 ' ]] && {
        ShellBot.sendMessage --chat_id $ {callback_query_message_chat_id [$ id]} \
            --text " üîí SUSPEND DEALER üîí \ n \ nReport or user dele [Ex: @crazy_vpn]: " \
            --reply_markup " $ ( ShellBot.ForceReply ) "
    } || {
        ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
            --text " üö´ ACCESS DENIED üö´ "
        return 0
    }
}

susp_rev () {
    _revs = $ 1
    [[ -z  " $ _revs " ]] && {
        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
            --text " $ ( echo -e " Erro " ) "
        return 0
    }
    [[ -d  " / etc / bot / suspensions / $ _revs " ]] && {
        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
            --text " $ ( echo -e " OR USER IS SUSPENDED! " ) " \
            --parse_mode html
        return 0
    }
    [[ !  -d  " / etc / bot / resell / $ _revs " ]] && {
        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
            --text " $ ( echo -e " OR USER NAO EXISTS! " ) " \
            --parse_mode html
        return 0
    }
    [[ " $ {message_from_id [$ id]} "  ==  " $ id_admin " ]] && {
        [[ " $ ( grep -wc ' SUBSELL ' / etc / bot / resell / $ _revs / $ _revs ) "  ! =  ' 0 ' ]] && {
            while  read _listsub3 ;  do
                _usub3 = " $ ( echo $ _listsub3  | awk ' {print $ 2} ' ) "
                _dir_users = " / etc / bot / resell / $ _usub3 / users "
                [[ " $ ( ls $ _dir_users  | wc -l ) "  ! =  ' 0 ' ]] && {
                    for  _user  in  $ ( ls $ _dir_users ) ;  do
                        usermod -L $ _user
                        pkill -f $ _user
                    done
                }
                mv / etc / bot / resell / $ _usub3 / etc / bot / suspensos / $ _usub3
                grep -w " $ _usub3 "  $ atives  >> $ suspensions
            done  <<< " $ (grep -w 'SUBSELL' / etc / bot / resell / $ _ revs / $ _ revs) "
        }
        [[ " $ ( ls / etc / bot / resell / $ _revs / users | wc -l ) "  ! =  ' 0 ' ]] && {
            for  _user_  in  $ ( ls / etc / bot / resell / $ _revs / users ) ;  do
                usermod -L $ _user_
                pkill -f $ _user_
            done
        }
        mv / etc / bot / resell / $ _revs / etc / bot / suspensos / $ _revs
        grep -w " $ _revs "  $ atives  >> $ suspensions
        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
            --text " $ ( echo -e " SUSPENDED COM SUCCESS " ) " \
            --parse_mode html
        return 0
    } || {
        [[ " $ ( grep -wc " $ _revs " / etc / bot / resell / $ {message_from_username} / $ {message_from_username} ) "  ! =  ' 0 ' ]] && {
            [[ " $ ( ls / etc / bot / resell / $ _revs / users | wc -l ) "  ! =  ' 0 ' ]] && {
                for  _user_  in  $ ( ls / etc / bot / resell / $ _revs / users ) ;  do
                    usermod -L $ _user_
                    pkill -f $ _user_
                done
            }
            mv / etc / bot / resell / $ _revs / etc / bot / suspensos / $ _revs
            grep -w " $ _revs "  $ atives  >> $ suspensions
            ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                --text " $ ( echo -e " SUSPENDED COM SUCCESS " ) " \
                --parse_mode html
            return 0
        } || {
            ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                --text " $ ( echo -e " OR SUB RESELLER NAO EXISTS " ) " \
                --parse_mode html
            return 0
        }
    }
}

infouserbot () {
    [[ $ ( grep -wc $ {message_from_username}  $ ativos )  ! =  ' 0 ' ]] && {
        _cont_limite = $ ( grep -w $ {message_from_username}  $ ativos  | awk ' {print $ 4} ' )
        fun_verif_limite_rev $ {message_from_username}
        _cont_disp = $ ( echo $ _cont_limite - $ _result  | bc )
        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
            --text " $ ( echo -e " <b> NOME: </> $ {message_from_first_name [$ (ShellBot.ListUpdates)]} \ n <b> USER: </> "  " @ $ {message_from_username [$ (ShellBot .ListUpdates)] : - null} " ) \ n <b> ID: </> $ {message_from_id [$ (ShellBot.ListUpdates)]} \ nACESSO: RESELL \ n <b> TOTAL LIMIT : </b> $ _cont_limite \ n <b> REMAINING LIMIT : </b> $ _cont_disp " \
            --parse_mode html
        return 0
    } || {
        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
            --text " $ ( echo -e " <b> NOME: </> $ {message_from_first_name [$ (ShellBot.ListUpdates)]} \ n <b> USER: </> "  " @ $ {message_from_username [$ (ShellBot .ListUpdates)] : - null} " ) \ n <b> ID: </> $ {message_from_id [$ (ShellBot.ListUpdates)]}  " \
            --parse_mode html
        return 0
    }
}

fun_menurevenda () {
    [[ " $ ( grep -wc $ {callback_query_from_username}  $ hangs ) "  ! =  ' 0 ' ]] && {
        ShellBot.answerCallbackQuery --callback_query_id $ {callback_query_id [$ id]} \
            --text " ‚ö†Ô∏è VC IS SUSPENDED! CONTATE OR ADMINISTRATOR "
        return 0
    }
    [[ " $ {callback_query_from_id [$ id]} "  ==  " $ id_admin " ]] || [[ " $ ( grep -wc $ {callback_query_from_username}  $ assets ) "  ! =  ' 0 ' ]] && {
        ShellBot.editMessageText --chat_id $ {callback_query_message_chat_id [$ id]} \
            --message_id $ {callback_query_message_message_id [$ id]} \
            --text " SELECT UMA OP√á√ÉO ABAIXO: " \
            --reply_markup " $ ( ShellBot.InlineKeyboardMarkup --button ' menu4 ' ) "
        return 0
    }
}

# ADMIN MENU LIST
unset menu1
menu1 = ' '
ShellBot.InlineKeyboardButton --button ' menu1 ' --line 1 --text ' CREATE USER ' --callback_data ' _criaruser '
ShellBot.InlineKeyboardButton --button ' menu1 ' --line 2 --text ' CREATE TESTE ' --callback_data ' _criarteste '
ShellBot.InlineKeyboardButton --button ' menu1 ' --line 3 --text ' REMOVER ' --callback_data ' _deluser '
ShellBot.InlineKeyboardButton --button ' menu1 ' --line 4 --text ' ALTER SENHA ' --callback_data ' _altsenha '
ShellBot.InlineKeyboardButton --button ' menu1 ' --line 5 --text ' ALTER LIMITE ' --callback_data ' _altlimite '
ShellBot.InlineKeyboardButton --button ' menu1 ' --line 6 --text ' ALTER DATA ' --callback_data ' _altdata '
ShellBot.InlineKeyboardButton --button ' menu1 ' --line 7 --text ' ONLINE USERS ' --callback_data ' _monitor '
ShellBot.InlineKeyboardButton --button ' menu1 ' --line 8 --text ' USER INFO ' --callback_data ' _verusers '
ShellBot.InlineKeyboardButton --button ' menu1 ' --line 9 --text ' EXPIRED ' --callback_data ' _expired '
ShellBot.InlineKeyboardButton --button ' menu1 ' --line 1 --text ' INFO VPS ' --callback_data ' _infovps '
ShellBot.InlineKeyboardButton --button ' menu1 ' --line 2 --text ' OTIMIZE ' --callback_data ' _otimize '
ShellBot.InlineKeyboardButton --button ' menu1 ' --line 3 --text ' ARCHIVES ' --callback_data ' _arqdown '
ShellBot.InlineKeyboardButton --button ' menu1 ' --line 4 --text ' RESELL ' --callback_data ' _opcoesrev '
ShellBot.InlineKeyboardButton --button ' menu1 ' --line 5 --text ' SPEEDTESTE ' --callback_data ' _speedteste '
ShellBot.InlineKeyboardButton --button ' menu1 ' --line 6 --text ' BACKUP USERS ' --callback_data ' _backupusers '
ShellBot.InlineKeyboardButton --button ' menu1 ' --line 7 --text " ALTO BACKUP " --callback_data ' _autobkp '
ShellBot.InlineKeyboardButton --button ' menu1 ' --line 8 --text ' RELATORY ' --callback_data ' _relatorio '
ShellBot.InlineKeyboardButton --button ' menu1 ' --line 9 --text ' HELP ' --callback_data ' _ajuda '
ShellBot.regHandleFunction --function fun_adduser --callback_data _criaruser
ShellBot.regHandleFunction --function fun_add_teste --callback_data _criarteste
ShellBot.regHandleFunction --function fun_deluser --callback_data _deluser
ShellBot.regHandleFunction --function alter_senha --callback_data _altsenha
ShellBot.regHandleFunction --function alter_limite --callback_data _altlimite
ShellBot.regHandleFunction --function alter_data --callback_data _altdata
ShellBot.regHandleFunction --function fun_down --callback_data _arqdown
ShellBot.regHandleFunction --function monitor_ssh --callback_data _monitor
ShellBot.regHandleFunction --function ver_users --callback_data _verusers
ShellBot.regHandleFunction --function fun_exp_user --callback_data _expired
ShellBot.regHandleFunction --function otimizer --callback_data _otimize
ShellBot.regHandleFunction --function speed_test --callback_data _speedteste
ShellBot.regHandleFunction --function infovps --callback_data _infovps
ShellBot.regHandleFunction --function backup_users --callback_data _backupusers
ShellBot.regHandleFunction --function fun_backauto --callback_data _autobkp
ShellBot.regHandleFunction --function relatorio_rev --callback_data _relatorio
ShellBot.regHandleFunction --function fun_ajuda --callback_data _ajuda
ShellBot.regHandleFunction --function fun_menurevenda --callback_data _opcoesrev
unset keyboard1
keyboard1 = " $ ( ShellBot.InlineKeyboardMarkup -b ' menu1 ' ) "

# RESELLER MENU LIST
unset menu2
menu2 = ' '
ShellBot.InlineKeyboardButton --button ' menu2 ' --line 1 --text ' CREATE USER ' --callback_data ' _criaruser2 '
ShellBot.InlineKeyboardButton --button ' menu2 ' --line 1 --text ' CREATE TESTE ' --callback_data ' _criarteste2 '
ShellBot.InlineKeyboardButton --button ' menu2 ' --line 2 --text ' REMOVER ' --callback_data ' _deluser2 '
ShellBot.InlineKeyboardButton --button ' menu2 ' --line 2 --text ' ONLINE USERS ' --callback_data ' _monitor2 '
ShellBot.InlineKeyboardButton --button ' menu2 ' --line 3 --text ' ALTER LIMITE ' --callback_data ' _altlimite2 '
ShellBot.InlineKeyboardButton --button ' menu2 ' --line 3 --text ' USER INFO ' --callback_data ' _verusers2 '
ShellBot.InlineKeyboardButton --button ' menu2 ' --line 4 --text ' ALTER SENHA ' --callback_data ' _altsenha2 '
ShellBot.InlineKeyboardButton --button ' menu2 ' --line 4 --text ' EXPIRED ' --callback_data ' _expirados2 '
ShellBot.InlineKeyboardButton --button ' menu2 ' --line 5 --text ' ALTER DATA ' --callback_data ' _altdata2 '
ShellBot.InlineKeyboardButton --button ' menu2 ' --line 5 --text ' RESELL ' --callback_data ' _opcoesrev2 '
ShellBot.InlineKeyboardButton --button ' menu2 ' --line 6 --text ' RELATORY ' --callback_data ' _relatorio2 '
ShellBot.InlineKeyboardButton --button ' menu2 ' --line 6 --text ' HELP ' --callback_data ' _ajuda2 '
ShellBot.regHandleFunction --function fun_adduser --callback_data _criaruser2
ShellBot.regHandleFunction --function fun_add_teste --callback_data _criarteste2
ShellBot.regHandleFunction --function fun_deluser --callback_data _deluser2
ShellBot.regHandleFunction --function alter_senha --callback_data _altsenha2
ShellBot.regHandleFunction --function alter_limite --callback_data _altlimite2
ShellBot.regHandleFunction --function alter_data --callback_data _altdata2
ShellBot.regHandleFunction --function monitor_ssh --callback_data _monitor2
ShellBot.regHandleFunction --function ver_users --callback_data _verusers2
ShellBot.regHandleFunction --function fun_exp_user --callback_data _expirados2
ShellBot.regHandleFunction --function relatorio_rev --callback_data _relatorio2
ShellBot.regHandleFunction --function fun_menurevenda --callback_data _opcoesrev2
ShellBot.regHandleFunction --function fun_ajuda --callback_data _ajuda2
unset keyboard2
keyboard2 = " $ ( ShellBot.InlineKeyboardMarkup -b ' menu2 ' ) "

# MUNU SUB RESELLER LIST
unset menu3
menu3 = ' '
ShellBot.InlineKeyboardButton --button ' menu3 ' --line 1 --text ' CREATE USER ' --callback_data ' _criaruser3 '
ShellBot.InlineKeyboardButton --button ' menu3 ' --line 1 --text ' CREATE TESTE ' --callback_data ' _criarteste3 '
ShellBot.InlineKeyboardButton --button ' menu3 ' --line 2 --text ' REMOVER ' --callback_data ' _deluser3 '
ShellBot.InlineKeyboardButton --button ' menu3 ' --line 2 --text ' ONLINE USERS ' --callback_data ' _monitor3 '
ShellBot.InlineKeyboardButton --button ' menu3 ' --line 3 --text ' ALTER LIMITE ' --callback_data ' _altlimite3 '
ShellBot.InlineKeyboardButton --button ' menu3 ' --line 3 --text ' USER INFO ' --callback_data ' _verusers3 '
ShellBot.InlineKeyboardButton --button ' menu3 ' --line 4 --text ' ALTER SENHA ' --callback_data ' _altsenha3 '
ShellBot.InlineKeyboardButton --button ' menu3 ' --line 4 --text ' EXPIRED ' --callback_data ' _expirados3 '
ShellBot.InlineKeyboardButton --button ' menu3 ' --line 5 --text ' ALTER DATA ' --callback_data ' _altdata3 '
ShellBot.InlineKeyboardButton --button ' menu3 ' --line 5 --text ' HELP ' --callback_data ' _ajuda3 '
ShellBot.regHandleFunction --function fun_adduser --callback_data _criaruser3
ShellBot.regHandleFunction --function fun_add_teste --callback_data _criarteste3
ShellBot.regHandleFunction --function fun_deluser --callback_data _deluser3
ShellBot.regHandleFunction --function alter_senha --callback_data _altsenha3
ShellBot.regHandleFunction --function alter_limite --callback_data _altlimite3
ShellBot.regHandleFunction --function alter_data --callback_data _altdata3
ShellBot.regHandleFunction --function monitor_ssh --callback_data _monitor3
ShellBot.regHandleFunction --function ver_users --callback_data _verusers3
ShellBot.regHandleFunction --function fun_exp_user --callback_data _expirados3
ShellBot.regHandleFunction --function fun_ajuda --callback_data _ajuda3
unset keyboard3
keyboard3 = " $ ( ShellBot.InlineKeyboardMarkup -b ' menu3 ' ) "

# RESALE OPCOES MENU LIST
unset menu4
menu4 = ' '
ShellBot.InlineKeyboardButton --button ' menu4 ' --line 1 --text ' ADD RESELL ' --callback_data ' _addrev '
ShellBot.InlineKeyboardButton --button ' menu4 ' --line 2 --text ' REMOVER RESELL ' --callback_data ' _delrev '
ShellBot.InlineKeyboardButton --button ' menu4 ' --line 3 --text ' ALTER LIMIT RESELL ' --callback_data ' _limrev '
ShellBot.InlineKeyboardButton --button ' menu4 ' --line 4 --text ' ALTER DATA RESELL ' --callback_data ' _datrev '
ShellBot.InlineKeyboardButton --button ' menu4 ' --line 5 --text ' LIST RESELL ' --callback_data ' _listrev '
ShellBot.InlineKeyboardButton --button ' menu4 ' --line 6 --text ' SUSPEND RESELLING ' --callback_data ' _yourprevendas '
ShellBot.regHandleFunction --function fun_add_revenda --callback_data _addrev
ShellBot.regHandleFunction --function fun_del_rev --callback_data _delrev
ShellBot.regHandleFunction --function fun_lim_rev --callback_data _limrev
ShellBot.regHandleFunction --function fun_dat_rev --callback_data _datrev
ShellBot.regHandleFunction --function fun_list_rev --callback_data _listrev
ShellBot.regHandleFunction --function fun_susp_rev --callback _susprevendas
unset keyboard4
keyboard4 = " $ ( ShellBot.InlineKeyboardMarkup -b ' menu4 ' ) "

while  : ;  do
    [[ -e  " /etc/SSHPlus/backups/backup.vps " ]] && {
        backup_auto
    }
    # Obtem as updates
    ShellBot.getUpdates --limit 100 --offset $ ( ShellBot.OffsetNext ) --timeout 35
    # List or index of updates
    for  id  in  $ ( ShellBot.ListUpdates ) ;  do
        # Start thread
        (
            ShellBot.watchHandle --callback_data $ {callback_query_data [$ id]}
            # Requisi√ß√µes submitnte not private.
            [[ $ {message_chat_type [$ id]}  ! =  ' private ' ]] &&  continue
            [[ $ {message_text [$ id]} ]] || restore_backup
            CAD_ARQ = / tmp / cad. $ {message_from_id [$ id]}
            if [[ $ {message_entities_type [$ id]}  == bot_command]] ;  then
                # Verify the message sent by the user is a valid command.
                case  $ {message_text [$ id]}  in
                * )
                    :
                    # commands
                    command = ( $ {message_text [$ id]} )
                    [[ " $ {command [0]} "  =  " / start " ]] && msg_bem_vindo
                    [[ " $ {command [0]} "  =  " / menu " ]] && fun_menu
                    [[ " $ {command [0]} "  =  " / info " ]] && infouserbot
                    [[ " $ {command [0]} "  =  " / hrlp "  ||  " $ {command [0]} "  =  " / ajuda " ]] && fun_ajuda
                    [[ " $ {command [0]} "  =  " / bot "  ||  " $ {command [0]} "  =  " / envelope " ]] && sobremim
                    ;;
                that C
            fi
            if [[ $ {message_reply_to_message_message_id [$ id]} ]] ;  then
                # Analyze the response interface.
                case  $ {message_reply_to_message_text [$ id]}  in
                ' üë§ CREATE USER üë§ \ n \ nUsername: ' )
                    verify_access
                    [[ " $ _erro "  ==  ' 1 ' ]] &&  break
                    [[ " $ ( awk -F :  ' $ 3> = 1000 {print $ 1} ' / etc / passwd | grep -w $ {message_text [$ id]}  | wc -l ) "  ! =  ' 0 ' ]] && {
                        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                            --text " $ ( echo -e " ‚ùå Erro! INVALID USER ‚ùå \ n \ n‚ö†Ô∏è Outro Nome Report .. " ) " \
                            --parse_mode html
                        > $ CAD_ARQ
                        break
                    }
                    [ " $ {message_text [$ id]} "  ==  ' root ' ] && {
                        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                            --text " $ ( echo -e " ‚ùå ERRO! INVALID USER ‚ùå \ n \ n‚ö†Ô∏è Outro Nome Report .. " ) " \
                            --parse_mode html
                        > $ CAD_ARQ
                        break
                    }
                    sizemin = $ ( echo -e $ { # message_text [$ id]} )
                    [[ " $ sizemin "  -lt  ' 4 ' ]] && {
                        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                            --text " $ ( echo -e " ‚ùå Erro! \ n \ nUse at least 4 characters \ n [EX: test] " ) " \
                            --parse_mode html
                        > $ CAD_ARQ
                        break
                    }
                    sizemax = $ ( echo -e $ { # message_text [$ id]} )
                    [[ " $ sizemax "  -gt  ' 10 ' ]] && {
                        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                            --text " $ ( echo -e " ‚ùå Erro! \ n \ nUse no maximum 8 characters \ n [EX: crazy] " ) " \
                            --parse_mode html
                        > $ CAD_ARQ
                        break
                    }
                    echo  " Nome: $ {message_text [$ id]} "  > $ CAD_ARQ
                    ShellBot.sendMessage --chat_id $ {message_from_id [$ id]} \
                        --text ' Senha: ' \
                        --reply_markup " $ ( ShellBot.ForceReply ) "  # Force a response.
                    ;;
                ' Senha: ' )
                    sizepass = $ ( echo -e $ { # message_text [$ id]} )
                    verify_access
                    [[ " $ _erro "  ==  ' 1 ' ]] &&  break
                    [[ " $ sizepass "  -lt  ' 4 ' ]] && {
                        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                            --text " $ ( echo -e " ‚ùå Erro! \ n \ nUse at least 4 characters \ n [EX: 1234] " ) " \
                            --parse_mode html
                        > $ CAD_ARQ
                        break
                    }
                    echo  " Senha: $ {message_text [$ id]} "  >> $ CAD_ARQ
                    # Next field.
                    ShellBot.sendMessage --chat_id $ {message_from_id [$ id]} \
                        --text ' Limit: ' \
                        --reply_markup " $ ( ShellBot.ForceReply ) "
                    ;;
                ' Limit: ' )
                    verify_access
                    [[ " $ _erro "  ==  ' 1 ' ]] &&  break
                    [[ $ {message_text [$ id]}  ! =  ? (+ | -) + ([0-9])]] && {
                        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                            --text " $ ( echo -e " ‚ùå Erro! \ n \ nUltilize only numbers [EX: 1] " ) " \
                            --parse_mode html
                        > $ CAD_ARQ
                        break
                    }
                    [[ " $ {message_from_id [$ id]} "  ! =  " $ id_admin " ]] && {
                        _limTotal = $ ( grep -w " $ {message_from_username} "  $ ativos  | awk ' {print $ 4} ' )
                        fun_verif_limite_rev $ {message_from_username}
                        _limsomarev2 = $ ( echo " $ _result + $ {message_text [$ id]} "  | bc )
                        [[ " $ _limsomarev2 "  -gt  " $ _limTotal " ]] && {
                            _restant1 = $ (( $ _limTotal  -  $ _result ))
                            ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                                --text " $ ( echo -e " ‚ùå Vc nao tem limit enough \ n \ nLimit available level: $ _restant1  " ) " \
                                --parse_mode html
                            > $ CAD_ARQ
                            break
                        }
                    }
                    echo  " Limit: $ {message_text [$ id]} "  >> $ CAD_ARQ
                    # Next field.
                    ShellBot.sendMessage --chat_id $ {message_from_id [$ id]} \
                        --text ' Validade em days: ' \
                        --reply_markup " $ ( ShellBot.ForceReply ) "
                    ;;

                ' Validade in days: ' )
                    verify_access
                    [[ " $ _erro "  ==  ' 1 ' ]] &&  break
                    [[ $ {message_text [$ id]}  ! =  ? (+ | -) + ([0-9])]] && {
                        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                            --text " $ ( echo -e " ‚ùå Erro! \ n \ nUltilize only numbers [EX: 30] " ) " \
                            --parse_mode html
                        > $ CAD_ARQ
                        break
                    }
                    info_data = $ ( date ' +% d /% m /% C% y ' -d " + $ {message_text [$ id]} days " )
                    echo  " Validade: $ info_data "  >> $ CAD_ARQ
                    raise_user $ CAD_ARQ
                    [[ " (grep -w $ {message_text [$ id]} / etc / passwd) "  =  ' 0 ' ]] && {
                        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                            --text " $ ( echo -e ‚ùå Failed to create user ! ) " \
                            --parse_mode html
                        > $ CAD_ARQ
                        break
                    }
                    [[ " $ ( ls / etc / bot / files | wc -l ) "  ! =  ' 0 ' ]] && {
                        ShellBot.sendMessage --chat_id $ {message_from_id [$ id]} \
                            --text ' üì• ARQUIVOS DISPONIVEIS üì• \ n \ nDo you want to download? Sim ou Nao ?: ' \
                            --reply_markup " $ ( ShellBot.ForceReply ) "
                    } || {
                        ShellBot.sendMessage --chat_id $ {message_from_id [$ id]} \
                            --text " <b> ‚úÖ SERVANT COM SUCESSO ‚úÖ </b> \ n \ nIP: $ ( cat / etc / IP ) \ nUSER: <code> $ ( awk -F "  "  ' / Nome / {print $ 2} '  $ CAD_ARQ ) </code> \ nSENHA: <code> $ ( awk -F "  "  ' / Senha / {print $ 2} '  $ CAD_ARQ ) </code> \ nLIMITE: $ ( awk -F "  "  ' / Limite / {print $ 2} '  $ CAD_ARQ ) \ nEXPIRA EM: $ ( awk -F " "  '/ Validade / {print $ 2} '  $ CAD_ARQ ) " \
                            --parse_mode html
                        break
                    }
                    ;;
                ' üì• ARQUIVOS AVAILABLEIS üì• \ n \ nDo you want to download? Sim ou Nao ?: ' )
                    verify_access
                    [[ " $ _erro "  ==  ' 1 ' ]] &&  break
                    [[ $ {message_text [$ id]}  ! =  ? (+ | -) + ([A-Za-z])]] && {
                        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                            --text " $ ( echo -e " ‚ùå Opcao Invalid ‚ùå \ n \ n‚ö†Ô∏è Last only letters [EX: sim ou nao] " ) " \
                            --parse_mode html
                        ShellBot.sendMessage --chat_id $ {message_from_id [$ id]} \
                            --text " <b> ‚úÖ SERVANT COM SUCESSO ‚úÖ </b> \ n \ nIP: $ ( cat / etc / IP ) \ nUSER: <code> $ ( awk -F "  "  ' / Nome / {print $ 2} '  $ CAD_ARQ ) </code> \ nSENHA: <code> $ ( awk -F "  "  ' / Senha / {print $ 2} '  $ CAD_ARQ ) </code> \ nLIMITE: $ ( awk -F "  "  ' / Limite / {print $ 2} '  $ CAD_ARQ ) \ nEXPIRA EM: $ ( awk -F " "  '/ Validade / {print $ 2} '  $ CAD_ARQ ) " \
                            --parse_mode html
                        break
                    }
                    [[ " $ {message_text [$ id]} "  =  @ (Sim | sim | SIM)]] && {
                        msg_cli = " ‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â† \ n "
                        msg_cli + = " <b> PRE-CONFIGURED FILES </b> ‚ùó \ n "
                        msg_cli + = " ‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â† \ n \ n "
                        for  _file  in  $ ( ls / etc / bot / files ) ;  do
                            i = $ (( $ i  +  1 ))
                            msg_cli + = " <b> [ $ i ] </b> - $ _file \ n "
                        done
                        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                            --text " $ ( echo -e " $ msg_cli " ) " \
                            --parse_mode html
                        ShellBot.sendMessage --chat_id $ {message_from_id [$ id]} \
                            --text ' Report or File Number: ' \
                            --reply_markup " $ ( ShellBot.ForceReply ) "
                    } || {
                        ShellBot.sendMessage --chat_id $ {message_from_id [$ id]} \
                            --text " <b> ‚úÖ SERVANT COM SUCESSO ‚úÖ </b> \ n \ nIP: $ ( cat / etc / IP ) \ nUSER: <code> $ ( awk -F "  "  ' / Nome / {print $ 2} '  $ CAD_ARQ ) </code> \ nSENHA: <code> $ ( awk -F "  "  ' / Senha / {print $ 2} '  $ CAD_ARQ ) </code> \ nLIMITE: $ ( awk -F "  "  ' / Limite / {print $ 2} '  $ CAD_ARQ ) \ nEXPIRA EM: $ ( awk -F " "  '/ Validade / {print $ 2} '  $ CAD_ARQ ) " \
                            --parse_mode html
                    }
                    ;;
                ' Report or File Number: ' )
                    verify_access
                    [[ " $ _erro "  ==  ' 1 ' ]] &&  break
                    [[ $ {message_text [$ id]}  ! =  ? (+ | -) + ([0-9])]] && {
                        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                            --text " $ ( echo -e " ‚ùå Invalid Opcao ‚ùå \ n \ n‚ö†Ô∏è Ultilize only numbers [EX: 1] " ) " \
                            --parse_mode html
                        ShellBot.sendMessage --chat_id $ {message_from_id [$ id]} \
                            --text " <b> ‚úÖ SERVANT COM SUCESSO ‚úÖ </b> \ n \ nIP: $ ( cat / etc / IP ) \ nUSER: <code> $ ( awk -F "  "  ' / Nome / {print $ 2} '  $ CAD_ARQ ) </code> \ nSENHA: <code> $ ( awk -F "  "  ' / Senha / {print $ 2} '  $ CAD_ARQ ) </code> \ nLIMITE: $ ( awk -F "  "  ' / Limite / {print $ 2} '  $ CAD_ARQ ) \ nEXPIRA EM: $ ( awk -F " "  '/ Validade / {print $ 2} '  $ CAD_ARQ ) " \
                            --parse_mode html
                        > $ CAD_ARQ
                        break
                    }
                    fun_download $ {message_text [$ id]}  $ CAD_ARQ
                    # Clean or temporary file.
                    > $ CAD_ARQ
                    break
                    ;;
                ' üóë REMOVE USER üóë \ n \ nUsername: ' )
                    verify_access
                    [[ " $ _erro "  ==  ' 1 ' ]] &&  break
                    fun_del_user $ {message_text [$ id]}
                    [[ " $ _erro "  ==  ' 1 ' ]] &&  break
                    ShellBot.sendMessage --chat_id $ {message_from_id [$ id]} \
                        --text " ‚úÖ * Removed with success. * üöÆ " \
                        --parse_mode markdown
                    ;;
                ' üîê Alter Senha üîê \ n \ nUsername: ' )
                    verify_access
                    [[ " $ _erro "  ==  ' 1 ' ]] &&  break
                    fun_verif_user $ {message_text [$ id]}
                    echo  " $ _erro "
                    [[ " $ _erro "  ==  ' 1 ' ]] &&  break
                    echo  " $ {message_text [$ id]} "  > / tmp / name-s
                    ShellBot.sendMessage --chat_id $ {message_from_id [$ id]} \
                        --text ' Nova senha: ' \
                        --reply_markup " $ ( ShellBot.ForceReply ) "
                    ;;
                ' Nova senha: ' )
                    sizepass = $ ( echo -e $ { # message_text [$ id]} )
                    verify_access
                    [[ " $ _erro "  ==  ' 1 ' ]] &&  break
                    [[ " $ sizepass "  -lt  ' 4 ' ]] && {
                        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                            --text " $ ( echo -e " ‚ùå Erro! \ n \ n‚ö†Ô∏è Use at least 4 characters [EX: 1234] " ) " \
                            --parse_mode html
                        break
                    }
                    alter_senha_user $ ( cat / tmp / name-s )  $ {message_text [$ id]}
                    [[ " $ _erro "  ==  ' 1 ' ]] &&  break
                    ShellBot.sendMessage --chat_id $ {message_from_id [$ id]} \
                        --text " $ ( echo -e " = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó \ n <b> ‚úÖ ALTERED SENHA! </b>! \ n = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó \ n \ n <b> User: </b> $ ( cat / tmp / name-s ) \ n <b> Nova senha : </b> $ {message_text [$ id]} " ) " \
                        --parse_mode html
                    rm / tmp / name-s > / dev / null 2> & 1
                    ;;
                ' üë• Alter Limit üë• \ n \ nUsername: ' )
                    verify_access
                    [[ " $ _erro "  ==  ' 1 ' ]] &&  break
                    echo  $ _erro second
                    fun_verif_user $ {message_text [$ id]}
                    echo  " $ _erro "
                    [[ " $ _erro "  ==  ' 1 ' ]] &&  break
                    echo  " $ {message_text [$ id]} "  > / tmp / name-l
                    ShellBot.sendMessage --chat_id $ {message_from_id [$ id]} \
                        --text ' Novo limit: ' \
                        --reply_markup " $ ( ShellBot.ForceReply ) "
                    ;;
                ' Novo limit: ' )
                    verify_access
                    [[ " $ _erro "  ==  ' 1 ' ]] &&  break
                    [[ $ {message_text [$ id]}  ! =  ? (+ | -) + ([0-9])]] && {
                        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                            --text " $ ( echo -e " ‚ùå Erro! \ n \ n‚ö†Ô∏è Ultilize only numbers [EX: 1] " ) " \
                            --parse_mode html
                        break
                    }
                    alter_limite_user $ ( cat / tmp / name-l )  $ {message_text [$ id]}
                    [[ " $ _erro "  ==  ' 1 ' ]] &&  break
                    ShellBot.sendMessage --chat_id $ {message_from_id [$ id]} \
                        --text " $ ( echo -e " = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó \ n <b> ‚úÖ LIMIT ALTERED! </b>! \ n = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó \ n \ n <b> User: </b> $ ( cat / tmp / name-l ) \ n <b> Novo Limite : </b> $ {message_text [$ id]} " ) " \
                        --parse_mode html
                    rm / tmp / name-l > / dev / null 2> & 1
                    ;;
                ' ‚è≥ Alter Data ‚è≥ \ n \ nUsername: ' )
                    verify_access
                    [[ " $ _erro "  ==  ' 1 ' ]] &&  break
                    fun_verif_user $ {message_text [$ id]}
                    [[ " $ _erro "  ==  ' 1 ' ]] &&  break
                    echo  " $ {message_text [$ id]} "  > / tmp / name-d
                    ShellBot.sendMessage --chat_id $ {message_from_id [$ id]} \
                        --text ' report the days or data: ' \
                        --reply_markup " $ ( ShellBot.ForceReply ) "
                    ;;
                ' report the days or data: ' )
                    verify_access
                    [[ " $ _erro "  ==  ' 1 ' ]] &&  break
                    [[ $ {message_text [$ id]}  ! =  ? (+ | -) + ([0-9 /])]] && {
                        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                            --text " $ ( echo -e " ‚ùå Erro! Follow or example \ n \ nDays format [EX: 30] \ nData format [EX: 12/30/2019] " ) " \
                            --parse_mode html
                        break
                    }
                    alter_data_user $ ( cat / tmp / name-d )  $ {message_text [$ id]}
                    [[ " $ _erro "  ==  ' 1 ' ]] &&  break
                    ShellBot.sendMessage --chat_id $ {message_from_id [$ id]} \
                        --text " $ ( echo -e " = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó \ n <b> ‚úÖ DATA ALTERED! </b>! \ n = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó \ n \ n <b> User: </b> $ ( cat / tmp / name-d ) \ n <b> Nova Data : </b> $ udata " ) " \
                        --parse_mode html
                    rm / tmp / name-d > / dev / null 2> & 1
                    ;;
                ' [1] - ADD FILE \ n [2] - EXCLUDE FILE \ n \ nReport opcao [1-2]: ' )
                    [[ $ {message_text [$ id]}  ! =  ? (+ | -) + ([0-9])]] && {
                        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                            --text " $ ( echo -e " ‚ùå Erro! \ n \ n‚ö†Ô∏è Last only numbers [EX: 1 or 2] " ) " \
                            --parse_mode html
                        break
                    }
                    if [[ " $ {message_text [$ id]} "  =  ' 1 ' ]] ;  then
                        ShellBot.sendMessage --chat_id $ {message_from_id [$ id]} \
                            --text " üì§ HOST FILES üì§ \ n \ nSend me or file: " \
                            --reply_markup " $ ( ShellBot.ForceReply ) "
                    elif [[ " $ {message_text [$ id]} "  =  ' 2 ' ]] ;  then
                        [[ $ ( ls / etc / bot / files | wc -l )  ! =  ' 0 ' ]] && {
                            msg_cli1 = " ‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â† \ n "
                            msg_cli1 + = " üöÄ <b> HOSTED FILES </b> \ n "
                            msg_cli1 + = " ‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â†‚â† \ n \ n "
                            for  _file  in  $ ( ls / etc / bot / files ) ;  do
                                i = $ (( $ i  +  1 ))
                                msg_cli1 + = " <b> [ $ i ] </b> - $ _file \ n "
                            done
                            ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                                --text " $ ( echo -e " $ msg_cli1 " ) " \
                                --parse_mode html
                            ShellBot.sendMessage --chat_id $ {message_from_id [$ id]} \
                                --text " üóëExclude File \ nReport or File Number: " \
                                --reply_markup " $ ( ShellBot.ForceReply ) "
                        } || {
                            ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                                --text " $ ( echo -e " There are no files available " ) " \
                                --parse_mode html
                            break
                        }
                    else
                        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                            --text " $ ( echo -e " ‚ùå Invalid Opcao " ) " \
                            --parse_mode html
                        break
                    fi
                    ;;
                ' üóëExclude File \ nReport or File Number: ' )
                    [[ " $ {message_from_id [$ id]} "  ! =  " $ id_admin " ]] &&  break
                    Opc1 = $ {message_text [$ id]}
                    echo  $ Opt1
                    [[ $ {message_text [$ id]}  ! =  ? (+ | -) + ([0-9])]] && {
                        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                            --text " $ ( echo -e " ‚ùå Failed to or Exclude file! \ n \ n‚ö†Ô∏è Ultilize only numbers [EX: 1] " ) " \
                            --parse_mode html
                        break
                    } || {
                        echo  " opcao $ Opc1 "
                        _DirArq = $ ( ls / etc / bot / files )
                        i = 0
                        unset _Pass
                        while  read _Arq ;  do
                            i = $ ( expr $ i + 1 )
                            _oP = $ i
                            [[ $ i  == [1-9]]] && i = 0 $ i  && oP + = " 0 $ i "
                            echo -e " [ $ i ] - $ _Arq "
                            _Pass + = " \ n $ {_ oP} : $ {_ Arq} "
                        done  <<< " $ {_ DirArq} "
                        _file = $ ( echo -e " $ {_ Pass} "  | grep -E " \ b $ Opc1 \ b "  | cut -d: -f2 )
                        [[ -e / etc / bot / files / $ _file ]] && {
                            rm / etc / bot / files / $ _file
                            ShellBot.sendMessage --chat_id $ {message_from_id [$ id]} \
                                --text " ‚úÖ * Excluded as successor * ‚úÖ " \
                                --parse_mode markdown
                            break
                        } || {
                            ShellBot.sendMessage --chat_id $ {message_from_id [$ id]} \
                                --text " $ ( echo -e " ‚ùå Opcao invalidates " ) "
                            break
                        }
                    }
                    ;;
                ' üì§ HOST FILES üì§ \ n \ nSend me or file: ' )
                    if [[ " $ {update_id [$ id]} " ]] ;  then
                        # Monitor or send files
                        [[ $ {message_document_file_id [$ id]} ]] && file_id = $ {message_document_file_id [$ id]}  && download_file = 1
                        # Verify if or download is enabled.
                        [[ $ download_file  -eq 1]] && {
                            file_id = ( $ file_id )
                            ShellBot.getFile --file_id " $ {file_id [0]} "
                            ShellBot.downloadFile --file_path $ {return [file_path]} --dir " / tmp / file "  && {
                                msg = ' * ‚úÖ File hosted with event. * \ n \ n '
                                msg + = " * üì§ Information * \ n \ n "
                                msg + = " * Nome *: $ {message_document_file_name} \ n "
                                msg + = " * Except em *: / etc / bot / files "
                                ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                                    --text " $ ( echo -e " $ msg " ) " \
                                    --parse_mode markdown
                                mv / tmp / file / $ ( ls -1rt / tmp / file | tail -n1 ) / etc / bot / files / $ {message_document_file_name}
                                break
                            }
                        } || {
                            ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                                --text " $ ( echo -e " ‚ùå Failed to receive file ‚ùå " ) " \
                                --parse_mode markdown
                            break
                        }
                    fi
                    ;;
                ' Do you want to restore? [sim | nao] ' )
                    Resp = $ {message_text [$ id]}
                    [[ $ {message_from_id [$ id]}  ! =  $ {id_admin} ]] &&  break
                    [[ $ Resp  ! =  ? (+ | -) + ([az])]] && {
                        ShellBot.sendMessage --chat_id $ {id_admin} \
                            --text " $ ( echo -e " ‚ùå Erro! \ n \ n‚ö†Ô∏è Ultilize just sim ou nao " ) " \
                            --parse_mode html
                        break
                    }
                    [[ " $ Resp "  =  @ (Sim | sim | SIM)]] && {
                        filebkp = $ ( ls / tmp | grep ' .vps ' )
                        [[ -e / tmp / $ filebkp ]] && {
                            mv / tmp / $ filebkp /backup.vps
                            cd /
                            tar -xvf backup.vps
                            rm /backup.vps
                            ShellBot.sendMessage --chat_id $ {id_admin} \
                                --text " $ ( echo -e " ‚úÖ Backup restored \ ncom successso! " ) " \
                                --parse_mode html
                            break
                        }
                    }
                    break
                    ;;
                    # FUNCOES DE GESTAO RESELLS
                    #
                    # Add, remove, limit, data, suspend, report
                    #
                ' üë• ADD RESELLER üë• \ n \ nReport or nome: ' )
                    verify_access
                    [[ " $ _erro "  ==  ' 1 ' ]] &&  break
                    echo  " Nome: $ {message_text [$ id]} "  > $ CAD_ARQ
                    ShellBot.sendMessage --chat_id $ {message_from_id [$ id]} \
                        --text ' Report or user dele [Ex: @crazy_vpn]: ' \
                        --reply_markup " $ ( ShellBot.ForceReply ) "
                    ;;
                ' Report or user dele [Ex: @crazy_vpn]: ' )
                    verify_access
                    [[ " $ _erro "  ==  ' 1 ' ]] &&  break
                    _VAR1 = $ ( echo -e $ {message_text [$ id]}  | awk -F ' @ ' { ' print $ 2 ' } )
                    [[ -z  $ _VAR1 ]] && {
                        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                            --text " $ ( echo -e " ‚ùå Error \ n \ n‚ö†Ô∏è Report or user [EX: @crazy_vpn] " ) " \
                            --parse_mode html
                        break
                    }
                    [[ -d / etc / bot / resell / $ _VAR1 ]] && {
                        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                            --text " $ ( echo -e " ‚ùå O Reseller $ {message_text [$ id]} does not exist " ) " \
                            --parse_mode html
                        break
                    }
                    echo  " User: $ {message_text [$ id]} "  >> $ CAD_ARQ
                    ShellBot.sendMessage --chat_id $ {message_from_id [$ id]} \
                        --text ' How many SSH can you raise: ' \
                        --reply_markup " $ ( ShellBot.ForceReply ) "
                    ;;
                ' How many SSH can I raise: ' )
                    verify_access
                    [[ " $ _erro "  ==  ' 1 ' ]] &&  break
                    [[ $ {message_text [$ id]}  ! =  ? (+ | -) + ([0-9])]] && {
                        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                            --text " $ ( echo -e " ‚ùå Erro! \ n \ n‚ö†Ô∏è Ultilize only numbers [EX: 10] " ) " \
                            --parse_mode html
                        break
                    }
                    [[ " $ {message_from_id [$ id]} "  ! =  " $ id_admin " ]] && {
                        _limTotal = $ ( grep -w " $ {message_from_username} "  $ ativos  | awk ' {print $ 4} ' )
                        fun_verif_limite_rev $ {message_from_username}
                        _limsomarev = $ ( echo " $ _result + $ {message_text [$ id]} "  | bc )
                        [[ " $ _limsomarev "  -gt  " $ _limTotal " ]] && {
                            _restant1 = $ (( $ _limTotal  -  $ _result ))
                            ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                                --text " $ ( echo -e " ‚ùå Vc nao tem limit enough \ n \ nLimit available level: $ _restant1  " ) " \
                                --parse_mode html
                            break
                        }
                    }
                    echo  " Limit: $ {message_text [$ id]} "  >> $ CAD_ARQ
                    ShellBot.sendMessage --chat_id $ {message_from_id [$ id]} \
                        --text ' How many days of access: ' \
                        --reply_markup " $ ( ShellBot.ForceReply ) "
                    ;;
                ' How many days of access: ' )
                    verify_access
                    [[ " $ _erro "  ==  ' 1 ' ]] &&  break
                    echo  " Validade: $ {message_text [$ id]} "  >> $ CAD_ARQ
                    _cliantev = $ ( cat $ CAD_ARQ )
                    raise_rev $ CAD_ARQ
                    ShellBot.sendMessage --chat_id $ {message_from_id [$ id]} \
                        --text " ‚úÖ Created with success. ‚úÖ \ n \ n $ ( < $ CAD_ARQ ) \ n \ nBOT: @ $ {message_reply_to_message_from_username} " \
                        --parse_mode html
                    ;;
                    # REMOVE RESELLER
                ' üóë REMOVE RESELLER üóë \ n \ nReport or user dele [Ex: @crazy_vpn]: ' )
                    echo -e " $ {message_text [$ id]} "  > $ CAD_ARQ
                    _Var = $ ( sed -n ' 1 p '  $ CAD_ARQ  | awk -F ' @ ' { ' print $ 2 ' } )
                    [[ -z  $ _Var ]] && {
                        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                            --text " $ ( echo -e " ‚ùå User invalid " ) " \
                            --parse_mode html
                        break
                    }
                    del_rev $ _Var
                    break
                    ;;
                    # ALTER LIMIT
                ' ‚ôæ ALTER RESALE LIMIT ‚ôæ \ n \ nReport or user dele [Ex: @crazy_vpn]: ' )
                    verify_access
                    [[ " $ _erro "  ==  ' 1 ' ]] &&  break
                    echo -e " Reseller: $ {message_text [$ id]} "  > $ CAD_ARQ
                    _Var1 = $ ( sed -n ' 1 p '  $ CAD_ARQ  | awk -F ' @ ' { ' print $ 2 ' } )
                    [[ -z  $ _Var1 ]] && {
                        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                            --text " $ ( echo -e " Don't make me invalid! " ) " \
                            --parse_mode html
                        break
                    }
                    [[ " $ {message_from_id [$ id]} "  ==  " $ id_admin " ]] && {
                        [[ $ ( grep -wc $ _Var1  $ assets )  ! =  ' 0 ' ]] && {
                            ShellBot.sendMessage --chat_id $ {message_from_id [$ id]} \
                                --text ' Report or Limit SSH: ' \
                                --reply_markup " $ ( ShellBot.ForceReply ) "
                        } || {
                            ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                                --text " $ ( echo -e " ‚ùå Reseller $ {message_text [$ id]} does not exist " ) " \
                                --parse_mode html
                            break
                        }
                    }
                    [[ $ ( grep -w $ {message_from_username}  $ ativos  | awk ' {print $ NF} ' )  ==  ' resell ' ]] && {
                        [[ " $ ( grep -wc " $ _Var1 " / etc / bot / resell / $ {message_from_username} / $ {message_from_username} ) "  ! =  ' 0 ' ]] && {
                            ShellBot.sendMessage --chat_id $ {message_from_id [$ id]} \
                                --text ' Report or Limit SSH: ' \
                                --reply_markup " $ ( ShellBot.ForceReply ) "
                        } || {
                            ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                                --text " $ ( echo -e " ‚ùå O Sub-reseller does not exist " ) " \
                                --parse_mode html
                            break
                        }
                    }
                    ;;
                ' Report or Limit SSH: ' )
                    verify_access
                    [[ " $ _erro "  ==  ' 1 ' ]] &&  break
                    [[ $ {message_text [$ id]}  ! =  ? (+ | -) + ([0-9])]] && {
                        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                            --text " $ ( echo -e " ‚ùå Erro! \ n \ nUltilize only numbers [EX: 1] " ) " \
                            --parse_mode html
                        break
                    }
                    [[ " $ {message_from_id [$ id]} "  ! =  " $ id_admin " ]] && {
                        _limTotal = $ ( grep -w " $ {message_from_username} "  $ ativos  | awk ' {print $ 4} ' )
                        fun_verif_limite_rev $ {message_from_username}
                        _limsomarev = $ ( echo " $ _result + $ {message_text [$ id]} "  | bc )

                        [[ $ ( grep -wc ' SUBSELL ' / etc / bot / resell / $ {message_from_username} / $ {message_from_username} )  ! =  ' 0 ' ]] && {
                            _limsomarev2 = $ ( echo " $ ( grep -w ' SUBSELL ' / etc / bot / resell / $ {message_from_username} / $ {message_from_username}  | awk { ' print $ 4 ' } | paste -s -d + | bc ) " + " $ {message_text [$ id]} "  | bc )
                        } || {
                            _limsomarev2 = ' 0 '
                        }
                        [[ " $ _limsomarev2 "  -ge  " $ _limTotal " ]] && {
                            echo  $ _limsomarev2
                            ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                                --text " $ ( echo -e " ‚ùå Vc nao tem limit enough " ) " \
                                --parse_mode html
                            break
                        }
                        [[ " $ _limsomarev "  -gt  " $ _limTotal " ]] && {
                            [[ " $ _limTotal "  ==  " $ (( $ _limTotal  -  $ _result )) " ]] && _restant1 = ' 0 '  || _restant1 = $ (( $ _limTotal  -  $ _result ))
                            ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                                --text " $ ( echo -e " ‚ùå Vc nao tem limit enough \ n \ nLimit remaining: $ _restant1  " ) " \
                                --parse_mode html
                            break
                        }
                    }
                    echo -e " Limit: $ {message_text [$ id]} "  >> $ CAD_ARQ
                    lim_rev $ CAD_ARQ
                    ShellBot.sendMessage --chat_id $ {message_from_id [$ id]} \
                        --text " $ ( echo -e " = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó \ n <b> ‚úÖ RESALE LIMIT ALTERED! </b>! \ n = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó \ n \ n $ ( < $ CAD_ARQ ) " ) " \
                        --parse_mode html
                    # ALTER DATA
                    ;;
                ' üìÜ ALTER DATA RESELL üìÜ \ n \ nReport or user dele [Ex: @crazy_vpn]: ' )
                    verify_access
                    [[ " $ _erro "  ==  ' 1 ' ]] &&  break
                    _VAR1 = $ ( echo -e $ {message_text [$ id]}  | awk -F ' @ ' { ' print $ 2 ' } )
                    [[ -z  $ _VAR1 ]] && {
                        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                            --text " $ ( echo -e " Reseller $ {message_text [$ id]} does not exist " ) " \
                            --parse_mode html
                        break
                    }
                    [[ " $ {message_from_id [$ id]} "  ==  " $ id_admin " ]] && {
                        [[ $ ( grep -wc $ _VAR1  $ assets )  ! =  ' 0 ' ]] && {
                            echo -e " Reseller: $ {message_text [$ id]} "  > $ CAD_ARQ
                            ShellBot.sendMessage --chat_id $ {message_from_id [$ id]} \
                                --text ' Access days [Ex: 30]: ' \
                                --reply_markup " $ ( ShellBot.ForceReply ) "
                        } || {
                            ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                                --text " $ ( echo -e " ‚ùå O Reseller $ {message_text [$ id]} does not exist " ) " \
                                --parse_mode html
                            break
                        }
                    } || {
                        [[ $ ( grep -w $ {message_from_username}  $ ativos  | awk ' {print $ NF} ' )  ==  ' resell ' ]] && {
                            [[ " $ ( grep -wc " $ _VAR1 " / etc / bot / resell / $ {message_from_username} / $ {message_from_username} ) "  ! =  ' 0 ' ]] && {
                                echo -e " Reseller: $ {message_text [$ id]} "  > $ CAD_ARQ
                                ShellBot.sendMessage --chat_id $ {message_from_id [$ id]} \
                                    --text ' Access days [Ex: 30]: ' \
                                    --reply_markup " $ ( ShellBot.ForceReply ) "
                            } || {
                                ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                                    --text " $ ( echo -e " ‚ùå O Subseller $ {message_text [$ id]} does not exist " ) " \
                                    --parse_mode html
                                break
                            }
                        }
                    }
                    ;;
                ' Access days [Ex: 30]: ' )
                    verify_access
                    [[ " $ _erro "  ==  ' 1 ' ]] &&  break
                    [[ $ {message_text [$ id]}  ! =  ? (+ | -) + ([0-9])]] && {
                        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                            --text " $ ( echo -e " ‚ùå Erro! \ n \ nUltilize only numbers [EX: 30] " ) " \
                            --parse_mode html
                        break
                    }
                    echo -e " Data: $ {message_text [$ id]} "  >> $ CAD_ARQ
                    dat_rev $ CAD_ARQ
                    [[ " $ _erro "  ==  ' 1 ' ]] &&  break
                    ShellBot.sendMessage --chat_id $ {message_from_id [$ id]} \
                        --text " $ ( echo -e " = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó \ n <b> ‚úÖ DATA RESELLING ALTERED! </b>! \ n = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó = √ó \ n \ n $ ( < $ CAD_ARQ ) " ) " \
                        --parse_mode html
                    ;;
                    # SUSPEND RESELLER
                ' üîí SUSPEND DEALER üîí \ n \ nReport or user dele [Ex: @crazy_vpn]: ' )
                    _VAR1 = $ ( echo -e $ {message_text [$ id]}  | awk -F ' @ ' { ' print $ 2 ' } )
                    [[ -z  $ _VAR1 ]] && {
                        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                            --text " $ ( echo -e " ‚ùå Reseller $ {message_text [$ id]} does not exist " ) " \
                            --parse_mode html
                        break
                    }
                    susp_rev $ _VAR1
                    break
                    ;;
                ' üë§ RAISE TEST üë§ \ n \ nHow many hours should EX last: 1: ' )
                    verify_access
                    echo  $ _erro
                    [[ " $ _erro "  ==  ' 1 ' ]] &&  break
                    [[ $ {message_text [$ id]}  ! =  ? (+ | -) + ([0-9])]] && {
                        ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                            --text " $ ( echo -e " ‚ùå Erro! \ n \ nUltilize only numbers [EX: 1] " ) " \
                            --parse_mode html
                        > $ CAD_ARQ
                        break
                    }
                    [[ " $ {message_from_id [$ id]} "  ! =  " $ id_admin " ]] && {
                        _limTotal = $ ( grep -w " $ {message_from_username} "  $ ativos  | awk ' {print $ 4} ' )
                        fun_verif_limite_rev $ {message_from_username}
                        _limsomarev2 = $ ( echo " $ _result + 1 "  | bc )
                        [[ " $ _limsomarev2 "  -gt  " $ _limTotal " ]] && {
                            ShellBot.sendMessage --chat_id $ {message_chat_id [$ id]} \
                                --text " $ ( echo -e " ‚ùå Vc nao tem limit enough " ) " \
                                --parse_mode html
                            > $ CAD_ARQ
                            break
                        }
                    }
                    fun_teste $ {message_text [$ id]}
                    ;;
                that C
            fi
        ) &
    done
done
# FIM
